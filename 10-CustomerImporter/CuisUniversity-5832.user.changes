

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (22 June 2023 20:42:44) as /home/julia/Documents/Inge/Smalltalk/CustomerImporter/linux64/CuisUniversity-5832.image!


----End fileIn of /home/julia/Documents/Inge/Smalltalk/CustomerImporter/linux64/CustomerImporter.st----!

!testRun: #ImportTest #test01Import stamp: 'JV 6/22/2023 20:45:25'!
PASSED!
!Customer methodsFor: 'importing' stamp: 'JV 6/22/2023 20:47:26'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!methodRemoval: Customer class #importCustomers stamp: 'JV 6/22/2023 20:47:26'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:48:21'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!methodRemoval: Customer #importCustomers stamp: 'JV 6/22/2023 20:48:28'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	!

!testRun: #ImportTest #test01Import stamp: 'JV 6/22/2023 20:48:30'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/22/2023 20:48:30'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:49:07' prior: 50624380!
test01Import

	self importCustomers ! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/22/2023 20:49:08'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/22/2023 20:49:09'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:05' prior: 50624722!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |
	
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'JV 6/22/2023 20:50:05'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:11' prior: 50624816!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |
	
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:16' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:16' prior: 50624864!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |
	
	self setUp.

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:27' prior: 50624912!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:33' overrides: 16961402!
tearDown

	session commit.
	session close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:33' prior: 50624950!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	self tearDown.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:38' prior: 50624993!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:47' prior: 50625030!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:50:54' prior: 50625066!
importCustomers

	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:51:31'!
test01Importing5CustomersShows5CustomersInDBS

	self importCustomers 
	
	! !

!methodRemoval: ImportTest #test01Import stamp: 'JV 6/22/2023 20:51:58'!
test01Import

	self importCustomers !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:52:38' prior: 50625137!
test01Importing5CustomersShows5CustomersInDBS

	self importCustomers 
	
	self assert: (self numberOfCustomers) equals: 5.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:52:52'!
numberOfCustomers
	^5.
	
	! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:52:54'!
ERROR!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:52:55'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:53:03' prior: 50625146!
test01Importing5CustomersShows5CustomersInDBS

	self importCustomers.
	
	self assert: (self numberOfCustomers) equals: 5.
	
	! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:53:04'!
PASSED!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:53:07'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:54:01' prior: 50625164!
test01Importing5CustomersShows5CustomersInDBS

	self importCustomers.
	
	self assert: (session numberOfCustomers) equals: 5.
	
	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'JV 6/22/2023 20:54:16'!
numberOfCustomers
	^5.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:54:19'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:56:24'!
test01ImportingCustomersShowsCorrectNames

	self importCustomers.
	
	self assert: self namesAreCorrect.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:56:33'!
test02ImportingCustomersShowsCorrectNames

	self importCustomers.
	
	self assert: self namesAreCorrect.
	
	! !

!methodRemoval: ImportTest #test01ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 20:56:33'!
test01ImportingCustomersShowsCorrectNames

	self importCustomers.
	
	self assert: self namesAreCorrect.
	
	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 20:57:00' prior: 50625198!
test02ImportingCustomersShowsCorrectNames

	self importCustomers.
	
	self assert: session namesAreCorrect.
	
	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'JV 6/22/2023 20:59:46' prior: 50625185!
numberOfCustomers
	^(self selectAllOfType: Customer new identificationType) length.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:59:50'!
ERROR!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 20:59:51'!
ERROR!
!DataBaseSession methodsFor: 'persistence - private' stamp: 'JV 6/22/2023 21:00:45' prior: 50625219!
numberOfCustomers
	^(self selectAllOfType: Customer new identificationType) size.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:00:47'!
FAILURE!
!DataBaseSession methodsFor: 'persistence - private' stamp: 'JV 6/22/2023 21:02:33' prior: 50625232!
numberOfCustomers
	^(self selectAllOfType: (Customer new identificationType)) size.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:02:36'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:02:36'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:02:54' prior: 50625178!
test01Importing5CustomersShows5CustomersInDBS

	self importCustomers.
	
	self assert: 5 equals: (session numberOfCustomers).
	
	! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:02:58'!
FAILURE!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:02:58'!
FAILURE!

session numberOfCustomers !

session selectAllOfType: Customer!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:03:57' prior: 50625255!
test01Importing5CustomersShows5CustomersInDBS

	self importCustomers.
	
	self assert: 2 equals: (session numberOfCustomers).
	
	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'JV 6/22/2023 21:04:07' prior: 50625242!
numberOfCustomers
	^(self selectAllOfType: Customer) size.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:04:09'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:04:10'!
ERROR!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:04:10'!
ERROR!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:04:19'!
ERROR!
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:04:35'!
namesAreCorrect
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:04:42' prior: 50625212!
test02ImportingCustomersShowsCorrectNames

	self importCustomers.
	
	self assert: self namesAreCorrect.
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:04:44'!
ERROR!
!ImportTest methodsFor: 'testing' stamp: 'JV 6/22/2023 21:04:52'!
namesAreCorrect
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'testing' stamp: 'JV 6/22/2023 21:05:33' prior: 50625312!
namesAreCorrect
	^session customers = Set with: 'Pepe Sanchez' with: ''! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:05:40'!
ERROR!
!DataBaseSession methodsFor: 'accessing' stamp: 'JV 6/22/2023 21:05:55'!
customers
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'accessing' stamp: 'JV 6/22/2023 21:06:16' prior: 50625324!
customers
	^self selectAllOfType: Customer.! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:06:18'!
ERROR!
!ImportTest methodsFor: 'testing' stamp: 'JV 6/22/2023 21:06:30' prior: 50625316!
namesAreCorrect
	^session customers = (Set with: 'Pepe Sanchez' with: '')! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:06:31'!
FAILURE!
!ImportTest methodsFor: 'testing' stamp: 'JV 6/22/2023 21:07:12' prior: 50625337!
namesAreCorrect
	^session customers = (Set with: 'Pepe Sanchez' with: 'Juan Perez')! !
!ImportTest methodsFor: 'testing' stamp: 'JV 6/22/2023 21:09:59' prior: 50625346!
namesAreCorrect
	^session customers inject: true into: [ :namesAreCorrect :customer | 
		namesAreCorrect and customer] ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:11:46' prior: 50625303!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer new firstName: 'Pepe'; lastName: 'Sanchez'.
	juan := Customer new firstName: 'Juan'; lastName: 'Perez'.
	
	self assert: self namesAreCorrect.
	
	! !
!Customer class methodsFor: 'importing' stamp: 'JV 6/22/2023 21:13:27'!
firstName: aFirstName lastName: aLastName id: anId
	^self new firstName: aFirstName; lastName: aLastName; identificationNumber: anId.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:14:31' prior: 50625359!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer firstName: 'Pepe' lastName: 'Sanchez' id: '123'.
	juan := Customer firstName: 'Juan' lastName: 'Perez' id: '321'.
	
	self assert: self namesAreCorrect.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:15:14' prior: 50625378!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer firstName: 'Pepe' lastName: 'Sanchez' id: '123'.
	juan := Customer firstName: 'Juan' lastName: 'Perez' id: '321'.
	
	self assert: (session ).
	
	! !

!methodRemoval: DataBaseSession #namesAreCorrect stamp: 'JV 6/22/2023 21:15:27'!
namesAreCorrect
	self shouldBeImplemented.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:17:25' prior: 50625390!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer firstName: 'Pepe' lastName: 'Sanchez' id: '123'.
	juan := Customer firstName: 'Juan' lastName: 'Perez' id: '321'.
	
	self assert: (session customers includes: pepe) & (session customers includes: juan).
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:17:26'!
FAILURE!

session customers!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:19:49'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:19:50'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:19:51'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:21:18' prior: 50625405!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer firstName: 'Pepe' lastName: 'Sanchez' id: '1'.
	juan := Customer firstName: 'Juan' lastName: 'Perez' id: '2'.
	
	self assert: (session customers includes: pepe) & (session customers includes: juan).
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:21:20'!
FAILURE!

session customers!
!Customer methodsFor: 'addresses' stamp: 'JV 6/22/2023 21:25:06' overrides: 16901772!
= anObject
	^(self firstName = anObject firstName) & (self lastName = anObject lastName) & (self identificationNumber = anObject identificationNumber) & (self identificationType = anObject identificationType)! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:25:10'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:25:11'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:25:12'!
FAILURE!

session customers!

session customers!
!Customer class methodsFor: 'importing' stamp: 'JV 6/22/2023 21:26:39'!
firstName: aFirstName lastName: aLastName id: anId idType: idType 
	^self new firstName: aFirstName; lastName: aLastName; identificationNumber: anId.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:26:39' prior: 50625432!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer firstName: 'Pepe' lastName: 'Sanchez' id: '1' idType: 'D'.
	juan := Customer firstName: 'Juan' lastName: 'Perez' id: '2' idType: 'D'.
	
	self assert: (session customers includes: pepe) & (session customers includes: juan).
	
	! !

!methodRemoval: Customer class #firstName:lastName:id: stamp: 'JV 6/22/2023 21:26:39'!
firstName: aFirstName lastName: aLastName id: anId
	^self new firstName: aFirstName; lastName: aLastName; identificationNumber: anId.!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:26:45'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:26:46'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:26:46'!
FAILURE!

session customers!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:29:58' prior: 50625102!
importCustomers

	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].


	inputStream close.
	! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:30:00'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:30:01'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:30:02'!
FAILURE!
!Customer class methodsFor: 'importing' stamp: 'JV 6/22/2023 21:34:03' prior: 50625470!
firstName: aFirstName lastName: aLastName id: anId idType: idType 
	^self new firstName: aFirstName; lastName: aLastName; identificationNumber: anId; identificationType: idType.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:34:10'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:34:11'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:34:11'!
FAILURE!

!methodRemoval: ImportTest #test02ImportingCustomersShowsCorrectNames stamp: 'JV 6/22/2023 21:35:29'!
test02ImportingCustomersShowsCorrectNames

	| juan pepe |
	self importCustomers.
	
	pepe := Customer firstName: 'Pepe' lastName: 'Sanchez' id: '1' idType: 'D'.
	juan := Customer firstName: 'Juan' lastName: 'Perez' id: '2' idType: 'D'.
	
	self assert: (session customers includes: pepe) & (session customers includes: juan).
	
	!

!methodRemoval: Customer class #firstName:lastName:id:idType: stamp: 'JV 6/22/2023 21:35:35'!
firstName: aFirstName lastName: aLastName id: anId idType: idType 
	^self new firstName: aFirstName; lastName: aLastName; identificationNumber: anId; identificationType: idType.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:36:56'!
test02ImportingCustomersShowsCorrectCustomerNames

	self importCustomers.
	
	self assert: ''.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:40:33' prior: 50625595!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session customer: '1'.
	juan := session customer: '2'.
	
	self assert: (pepe firstName = 'Pepe' & pepe lastName = 'Sanchez') & (juan firstName = 'Juan' & juan lastName = 'Perez').
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectCustomerNames stamp: 'JV 6/22/2023 21:40:40'!
ERROR!
!DataBaseSession methodsFor: 'accessing' stamp: 'JV 6/22/2023 21:40:45'!
customer: aRenameMe1 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:48:25' prior: 50625602!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session customerWithId: '1'.
	juan := session customerWithId: '2'.
	
	self assert: (pepe firstName = 'Pepe' & pepe lastName = 'Sanchez') & (juan firstName = 'Juan' & juan lastName = 'Perez').
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:48:54' prior: 50625622!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session customerWithId: 1.
	juan := session customerWithId: 2.
	
	self assert: (pepe firstName = 'Pepe' & pepe lastName = 'Sanchez') & (juan firstName = 'Juan' & juan lastName = 'Perez').
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectCustomerNames stamp: 'JV 6/22/2023 21:48:58'!
ERROR!
!DataBaseSession methodsFor: 'accessing' stamp: 'JV 6/22/2023 21:49:07'!
customerWithId: aRenameMe1 
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'accessing' stamp: 'JV 6/22/2023 21:49:36' prior: 50625651!
customerWithId: aCustomerId
	self halt.! !

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 21:49:41'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:56:51' prior: 50625635!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session .
	juan := ''.
	
	self assert: (pepe firstName = 'Pepe' & pepe lastName = 'Sanchez') & (juan firstName = 'Juan' & juan lastName = 'Perez').
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:58:29' prior: 50625664!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session select: [ :customer | customer firstName = 'Pepe'] ofType: Customer.
	juan := session select: [ :customer | customer firstName = 'Juan'] ofType: Customer.
	
	self assert: (pepe firstName = 'Pepe' & pepe lastName = 'Sanchez') & (juan firstName = 'Juan' & juan lastName = 'Perez').
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:59:02' prior: 50625675!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session select: [ :customer | customer firstName = 'Pepe'] ofType: Customer.
	juan := session select: [ :customer | customer firstName = 'Juan'] ofType: Customer.
	
	self assert: (pepe lastName = 'Sanchez') & (juan lastName = 'Perez').
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectCustomerNames stamp: 'JV 6/22/2023 21:59:05'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 21:59:29' prior: 50625691!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session select: [ :customer | customer firstName = 'Pepe'] ofType: Customer.
	juan := session select: [ :customer | customer firstName = 'Juan'] ofType: Customer.
	
	self assert: (pepe first lastName = 'Sanchez') & (juan first lastName = 'Perez').
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectCustomerNames stamp: 'JV 6/22/2023 21:59:31'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/22/2023 22:01:04' prior: 50625709!
test02ImportingCustomersShowsCorrectCustomerNames

	| juan pepe |
	self importCustomers.
	
	pepe := session select: [ :customer | customer firstName = 'Pepe'] ofType: Customer.
	juan := session select: [ :customer | customer firstName = 'Juan'] ofType: Customer.
	
	self assert: (pepe anyOne lastName = 'Sanchez') & (juan anyOne lastName = 'Perez').
	
	! !

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectCustomerNames stamp: 'JV 6/22/2023 22:01:05'!
PASSED!

!testRun: #ImportTest #test01Importing5CustomersShows5CustomersInDBS stamp: 'JV 6/22/2023 22:01:06'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomersShowsCorrectCustomerNames stamp: 'JV 6/22/2023 22:01:07'!
PASSED!

----QUIT----(22 June 2023 22:01:20) CuisUniversity-5832.image priorSource: 9366758!