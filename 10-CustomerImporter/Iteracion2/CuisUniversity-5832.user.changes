

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (26 June 2023 19:16:57) as /home/julia/Documents/Inge/Smalltalk/Cuis/linux64/CuisUniversity-5832.image!


----End fileIn of /home/julia/Documents/Inge/Smalltalk/Cuis/linux64/CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:23:50' prior: 50624631 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer 
				firstName: customerData second 
				lastName: customerData third 
				identificationType: customerData fourth 
				identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:23:54'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:23:54'!
ERROR!
!Customer class methodsFor: 'class initialization' stamp: 'JV 6/26/2023 19:24:01'!
firstName: aRenameMe1 lastName: aRenameMe2 identificationType: aRenameMe3 identificationNumber: aRenameMe4 
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'HAW 5/22/2022 18:06:47' prior: 50624783 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:25:56'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:28:06'!
newCustomerFrom: customerData

	| newCustomer |
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	^newCustomer
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:28:28'!
newFrom: customerData

	| newCustomer |
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	^newCustomer
! !

!methodRemoval: CustomerImporter #newCustomerFrom: stamp: 'JV 6/26/2023 19:28:28'!
newCustomerFrom: customerData

	| newCustomer |
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	^newCustomer
!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:28:57' prior: 50624827 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self newFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:28:59'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:30:05'!
newCustomerFrom: customerData

	| newCustomer |
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	^newCustomer
! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 19:30:05' prior: 50624898 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #newFrom: stamp: 'JV 6/26/2023 19:30:05'!
newFrom: customerData

	| newCustomer |
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	^newCustomer
!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:32:27'!
newAddressFrom: addressData
	| newAddress |
	newAddress := Address new.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth.
	^newAddress

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:34:28' prior: 50624939 overrides: 16902254!
value

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:34:30'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:37:25'!
getStringsBetweenCommasFrom: line

	^ line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:37:25' prior: 50624991 overrides: 16902254!
value

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self getStringsBetweenCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:37:25' prior: 50625018 overrides: 16902254!
value

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self getStringsBetweenCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self getStringsBetweenCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:39:17'!
splitStringsByCommasFrom: line

	^ line findTokens: $,! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 19:39:17' prior: 50625038 overrides: 16902254!
value

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!methodRemoval: CustomerImporter #getStringsBetweenCommasFrom: stamp: 'JV 6/26/2023 19:39:17'!
getStringsBetweenCommasFrom: line

	^ line findTokens: $,!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 19:51:26'!
test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']! !

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 19:51:29'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 19:52:10' prior: 50624483!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,invalidField
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:52:16'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 19:52:16'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 19:52:16'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 19:52:26'!
invalidImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,invalidField
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 19:52:34' prior: 50625103!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 19:52:36'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 19:52:36'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 19:52:37'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:53:42' prior: 50625064 overrides: 16902254!
value

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:56:11' prior: 50624926!
newCustomerFrom: customerData

	| customer |
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.
	^customer
! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 19:56:20' prior: 50625152 overrides: 16902254!
value

	|  line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'JV 6/26/2023 19:56:20'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:56:41' prior: 50625058!
splitStringsByCommasFrom: aLine

	^ aLine findTokens: $,! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 19:56:48' prior: 50625185 overrides: 16902254!
value

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'JV 6/26/2023 19:56:48'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:56:59' prior: 50625219 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:57:07'!
importCustomerLine

	| customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:57:07' prior: 50625248 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ self importCustomerLine ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:57:19'!
importAddressLine

	| addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:57:19' prior: 50625277 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ self importCustomerLine ].

		(line beginsWith: 'A') ifTrue: [ self importAddressLine.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:57:50' prior: 50625302 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ self importCustomerLine ].
		(line beginsWith: 'A') ifTrue: [ self importAddressLine ].
		
		line := readStream nextLine 
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 19:56:59' prior: 50625313 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:00:34' prior: 50625324 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := ( line findTokens: $,).
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:00:59' prior: 50625344 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:01:15' prior: 50625364 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData record |
			record := line findTokens: $,.
	customerData := record.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:01:42' prior: 50625383 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ | record |
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			
			customerData := record.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:01:51' prior: 50625403 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ | record |
		record := line findTokens: $,.
		
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:02:50' prior: 50625423 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ | record |
		record := self splitStringsByCommasFrom: line.
		
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:02:53'!
PASSED!

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 20:02:54'!
FAILURE!

!testRun: #ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 20:02:54'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:03:01'!
_test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']! !

!methodRemoval: ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 20:03:01'!
test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:03:03'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:03:24' prior: 50625443 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [ | record |
		record := self splitStringsByCommasFrom: line.
		
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := record.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:08:28' prior: 50625499 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [ | record |
		record := self splitStringsByCommasFrom: line.
		
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:08:33'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:12:03'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:12:03' prior: 50625519 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [ | record |
		record := self splitStringsByCommasFrom: line.
		
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:12:14'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:12:14' prior: 50625543 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [ | record |
		record := self splitStringsByCommasFrom: line.
		
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:12:41' prior: 50625564 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [ | record |
		record := self splitStringsByCommasFrom: line.
		
		self isCustomerRecord ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 20:13:34' prior: 50625582 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		record := self splitStringsByCommasFrom: line.
		
		self isCustomerRecord ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'JV 6/26/2023 20:13:34'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:13:40'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:15:00'!
createRecord

	^ record := self splitStringsByCommasFrom: line! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:15:00' prior: 50625600 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		
		self isCustomerRecord ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:15:05' prior: 50625633 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			newCustomer := self newCustomerFrom: record.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:15:08'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:15:30'!
importCustomer

	newCustomer := self newCustomerFrom: record.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:15:30' prior: 50625649 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:16:19'!
importAddress

	| newAddress |
			newAddress := self newAddressFrom: record.
			newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:16:19' prior: 50625673 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress.
			].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:16:31' prior: 50625694 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ 
			self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:16:42' prior: 50625706 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:16:44' prior: 50625718 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ self importCustomer ].
		self isAddressRecord ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:16:50' prior: 50625730 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self isCustomerRecord ifTrue: [ self importCustomer ].
		self isAddressRecord ifTrue: [ self importAddress ].
		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:18:07'!
importRecord

	self isCustomerRecord ifTrue: [ self importCustomer ].
		self isAddressRecord ifTrue: [ self importAddress ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:18:07' prior: 50625742 overrides: 16902254!
value

	line := readStream nextLine.
	
	[ line notNil ] whileTrue: [  
		self createRecord.
		self importRecord.
		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:18:10'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:20:38' prior: 50625760 overrides: 16902254!
value

	
	
	[line := readStream nextLine.
	line notNil ] whileTrue: [  
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:21:30'!
hasLinesLeft

	line := readStream nextLine.
	line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:21:30' prior: 50625771 overrides: 16902254!
value

	
	
	[self hasLinesLeft ] whileTrue: [  
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:21:35' prior: 50625784 overrides: 16902254!
value

	
	
	[self hasLinesLeft] whileTrue: [  
		self createRecord.
		self importRecord.
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:21:49' prior: 50625791 overrides: 16902254!
value

	[self hasLinesLeft] whileTrue: [  
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:21:51'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:21:51'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:22:12' prior: 50625778!
hasLinesLeft

	line := readStream nextLine.
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:22:16'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:32:00'!
test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']! !

!methodRemoval: ImportTest #_test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 20:32:00'!
_test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:32:18'!
test02ImportingCustomerWithMoreFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']! !

!methodRemoval: ImportTest #test02ImportingCustomerWithMoreFieldsGivesError stamp: 'JV 6/26/2023 20:32:28'!
test02ImportingCustomerWithMoreFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:33:36'!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']! !

!methodRemoval: ImportTest #test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError stamp: 'JV 6/26/2023 20:33:36'!
test02ImportingCustomerWithIncorrectAmountOfFieldsGivesError

	self should: [CustomerImporter valueFrom: self invalidImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'InvalidNumberOfParametersForCustomer']!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:34:26' prior: 50625861!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'Data has empty fields']! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:34:28'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 20:34:42' prior: 50625132!
validImportData

	^ ReadStream on:
'
'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08' prior: 50625898!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 20:35:16'!
emptyImportData

	^ ReadStream on:
'
'! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:35:52' prior: 50625884!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'Data has empty fields']! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:35:54'!
FAILURE!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'JV 6/26/2023 20:37:19' prior: 50624672!
from: aReadStream into: aSession
	self assertStreamIsNotEmpty: aReadStream.
	^self new initializeFrom: aReadStream into: aSession! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:37:23'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:37:23'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:37:25'!
ERROR!
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:37:43'!
assertStreamIsNotEmpty: aReadStream 
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:38:47' prior: 50625944!
assertStreamIsNotEmpty: aReadStream 
	^(aReadStream beginsWith: String newLineString) not! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:38:49'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:38:55'!
ERROR!
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:39:15' prior: 50625950!
assertStreamIsNotEmpty: aReadStream 
	^(aReadStream beginsWith: String newLineString) ifTrue: [self error: 'Data has empty fields']! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:39:17'!
ERROR!
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:39:31' prior: 50625961!
assertStreamIsNotEmpty: aReadStream 
	^(aReadStream nextLine beginsWith: String newLineString) ifTrue: [self error: 'Data has empty fields']! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:39:32'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:39:40'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:39:40'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:39:42'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:39:59' prior: 50624380!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:40:00'!
ERROR!
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:41:24'!
assertStreamIsValid: aReadStream 
	^(aReadStream nextLine beginsWith: String newLineString) ifTrue: [self error: 'Data has empty fields']! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 20:41:24' prior: 50625929!
from: aReadStream into: aSession
	self assertStreamIsValid: aReadStream.
	^self new initializeFrom: aReadStream into: aSession! !

!methodRemoval: CustomerImporter class #assertStreamIsNotEmpty: stamp: 'JV 6/26/2023 20:41:24'!
assertStreamIsNotEmpty: aReadStream 
	^(aReadStream nextLine beginsWith: String newLineString) ifTrue: [self error: 'Data has empty fields']!
!CustomerImporter class methodsFor: 'importing' stamp: 'JV 6/26/2023 20:48:05'!
peekLine: aReadStream
	| answer lineSeparators pos |
	lineSeparators := {Character cr. Character lf }. 
	pos := aReadStream position.
	answer := aReadStream upToAny: lineSeparators.
	aReadStream position: pos.
	^answer.! !
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:48:45' prior: 50626001!
assertStreamIsValid: aReadStream 
	^((self peekLine: aReadStream) beginsWith: String newLineString) ifTrue: [self error: 'Data has empty fields']! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:48:47'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:48:47'!
FAILURE!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:48:47'!
FAILURE!
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:49:06' prior: 50626035!
assertStreamIsValid: aReadStream 
	^((self peekLine: aReadStream) beginsWith: '') ifTrue: [self error: 'Data has empty fields']! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:49:08'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:49:08'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:49:08'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:49:48' prior: 50625915!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText = 'Data has empty fields']! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:49:54'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:49:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:49:54'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:50:05' prior: 50626067!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Data has empty fields']! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:50:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:50:07'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:50:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:50:07'!
ERROR!
!CustomerImporter class methodsFor: 'errorHandling' stamp: 'JV 6/26/2023 20:50:39' prior: 50626052!
assertStreamIsValid: aReadStream 
	^((self peekLine: aReadStream) beginsWith: '') ifTrue: [self error: 'DataHasEmptyFields']! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:50:51' prior: 50626085!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'DataHasEmptyFields']! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:50:52'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:50:52'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:50:52'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:50:52'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:51:55' prior: 50626115!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError message equals: 'DataHasEmptyFields']! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:51:56'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:52:09' prior: 50626137!
test02ImportingCsvWithEmptyFieldGivesError

	self should: [CustomerImporter valueFrom: self emptyImportData into: session.]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'DataHasEmptyFields'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 20:53:25' prior: 50626151!
test02ImportingCsvWithEmptyFieldGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'DataHasEmptyFields'].! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:53:26'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:53:26'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:53:26'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:53:26'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:54:00'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:54:00'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:54:00'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:55:32'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 20:55:32'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 20:55:32'!
ERROR!

!methodRemoval: CustomerImporter class #peekLine: stamp: 'JV 6/26/2023 20:58:17'!
peekLine: aReadStream
	| answer lineSeparators pos |
	lineSeparators := {Character cr. Character lf }. 
	pos := aReadStream position.
	answer := aReadStream upToAny: lineSeparators.
	aReadStream position: pos.
	^answer.!

!methodRemoval: CustomerImporter class #assertStreamIsValid: stamp: 'JV 6/26/2023 20:58:21'!
assertStreamIsValid: aReadStream 
	^((self peekLine: aReadStream) beginsWith: '') ifTrue: [self error: 'DataHasEmptyFields']!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'JV 6/26/2023 20:58:26' prior: 50626009!
from: aReadStream into: aSession
	
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 20:59:04' prior: 50625627!
createRecord

	record := self splitStringsByCommasFrom: line.
	self assertValidRecord: record.
	^record.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:00:12'!
assertValidRecord: aRecord.
	aRecord isEmpty ifTrue: [self error: 'Line is empty']! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:00:39' prior: 50626228!
assertValidRecord: aRecord.
	aRecord isEmpty ifTrue: [self error: 'Record is empty']! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:00:58' prior: 50626161!
test02ImportingCsvWithEmptyFieldGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:00:59'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:00:59'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:00:59'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:02:12'!
test03ImportingCsvWithExtraFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:02:35'!
extraFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,invalidField
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!methodRemoval: ImportTest #invalidImportData stamp: 'JV 6/26/2023 21:02:35'!
invalidImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,invalidField
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:02:44' prior: 50626270!
extraFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,invalidField
A,San Martin,3322,Olivos,1636,BsAs
'! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:02:55'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:02:55'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:02:56'!
FAILURE!

!testRun: #ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:02:56'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:04:35' prior: 50626234!
assertValidRecord: aRecord.
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	aRecord hasMoreFieldsThanAllowed ifTrue: [self error: 'Record has more fields than allowed'].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:05:17' prior: 50626309!
assertValidRecord: aRecord.
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	(self recordHasMoreFieldsThanAllowed: aRecord) ifTrue: [self error: 'Record has more fields than allowed'].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:07:21'!
recordHasMoreFieldsThanAllowed: aRecord
	
	| fields |
	fields := self splitStringsByCommasFrom: aRecord.
	^fields size > 5.! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:07:30'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:07:30'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:07:30'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:07:33'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:08:24' prior: 50626318!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	(aRecord size > 5) ifTrue: [self error: 'Record has more fields than allowed'].! !

!methodRemoval: CustomerImporter #recordHasMoreFieldsThanAllowed: stamp: 'JV 6/26/2023 21:08:34'!
recordHasMoreFieldsThanAllowed: aRecord
	
	| fields |
	fields := self splitStringsByCommasFrom: aRecord.
	^fields size > 5.!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:08:37'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:08:37'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:08:37'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:08:37'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:09:45' prior: 50626289!
extraFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,invalidField'! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:09:49' prior: 50626373!
extraFieldsImportData

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444,invalidField'! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:09:50'!
ERROR!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:09:50'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:09:50'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:09:51'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:13:06' prior: 50626346!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	(aRecord first = 'C') ifTrue: [(aRecord size > 5) ifTrue: [self error: 'Record has more fields than allowed']].
	(aRecord first = 'A') ifTrue: [(aRecord size > 6) ifTrue: [self error: 'Record has more fields than allowed']].! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:13:08'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:13:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:14:08'!
test04ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has less fields than required'].! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:14:35'!
missingCustomerFieldsImportData

	^ ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:14:54'!
test05ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has less fields than required'].! !

!methodRemoval: ImportTest #test04ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:14:54'!
test04ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has less fields than required'].!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:15:08'!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !

!methodRemoval: ImportTest #test03ImportingCsvWithExtraFieldsGivesError stamp: 'JV 6/26/2023 21:15:08'!
test03ImportingCsvWithExtraFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:15:26'!
extraCustomerFieldsImportData

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444,invalidField'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'JV 6/26/2023 21:15:26' prior: 50626458!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !

!methodRemoval: ImportTest #extraFieldsImportData stamp: 'JV 6/26/2023 21:15:26'!
extraFieldsImportData

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444,invalidField'!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:15:34'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:15:34'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:15:34'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:15:34'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:15:34'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:15:34'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:15:57'!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:16:27' prior: 50626481!
extraCustomerFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,extraField
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:15:26' prior: 50626536!
extraCustomerFieldsImportData

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444,invalidField'! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:17:10'!
extraAddressFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,extraField
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:17:17'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:17:18'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:17:18'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:17:18'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:17:18'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:17:18'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:17:18'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:18:27' prior: 50626396!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	(aRecord first = 'C') ifTrue: [(aRecord size = 5 ) ifFalse: [self error: 'Record has more fields than allowed']].
	(aRecord first = 'A') ifTrue: [(aRecord size > 6) ifTrue: [self error: 'Record has more fields than allowed']].! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:18:29'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:18:30'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:18:30'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:18:30'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:18:30'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:18:30'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:18:52' prior: 50626487!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:19:01' prior: 50626524!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:19:06' prior: 50626434!
test05ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:19:20' prior: 50626586!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	(aRecord first = 'C') ifTrue: [(aRecord size = 5 ) ifFalse: [self error: 'Record has invalid number of fields']].
	(aRecord first = 'A') ifTrue: [(aRecord size > 6) ifTrue: [self error: 'Record has invalid number of fields']].! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:19:24'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:19:24'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:19:24'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:19:24'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:19:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:19:40'!
test05ImportingCsvWithMissingAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:19:43'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:20:31'!
missingAddressFieldsImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,1636,BsAs
'! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:20:34'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:20:35'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:20:35'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:20:35'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:20:35'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:20:35'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:20:35'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:20:58' prior: 50626655!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	(aRecord first = 'C') ifTrue: [(aRecord size = 5 ) ifFalse: [self error: 'Record has invalid number of fields']].
	(aRecord first = 'A') ifTrue: [(aRecord size = 6) ifFalse: [self error: 'Record has invalid number of fields']].! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:21:00'!
PASSED!

!testRun: #ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:21:00'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:21:00'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:21:00'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:21:00'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:21:00'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:21:33'!
test02ImportingCsvWithEmptyFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !

!methodRemoval: ImportTest #test02ImportingCsvWithEmptyFieldsGivesError stamp: 'JV 6/26/2023 21:21:46'!
test02ImportingCsvWithEmptyFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:22:00'!
test02ImportingEmptyCsvGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !

!methodRemoval: ImportTest #test02ImportingCsvWithEmptyFieldGivesError stamp: 'JV 6/26/2023 21:22:00'!
test02ImportingCsvWithEmptyFieldGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:22:48'!
test07ImportingCsvWithEmptyFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyLinesImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:23:03'!
emptyLinesImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444

A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'JV 6/26/2023 21:23:06'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:23:07'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:23:07'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:23:07'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:23:07'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:23:07'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithEmptyFieldsGivesError stamp: 'JV 6/26/2023 21:23:07'!
PASSED!

!methodRemoval: ImportTest #test07ImportingCsvWithEmptyFieldsGivesError stamp: 'JV 6/26/2023 21:23:29'!
test07ImportingCsvWithEmptyFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyLinesImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:23:33'!
test06ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !

!methodRemoval: ImportTest #test05ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:23:33'!
test05ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:23:54'!
test01CustomerImporterImportsRecordsCorrectly

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'JV 6/26/2023 21:23:54'!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:26:26'!
test07ImportingCsvWithInvalidCustomerIndicatorGivesError

	self 
		should: [CustomerImporter valueFrom: self invalidCustomerIndicatorImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Not a valid record indicator'].! !
!ImportTest methodsFor: 'test data' stamp: 'JV 6/26/2023 21:27:25'!
invalidCustomerIndicatorImportData

	^ ReadStream on:
'Customer,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:27:35'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:27:35'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:27:35'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:27:35'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:27:35'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:27:35'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:27:35'!
FAILURE!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:27:36'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:29:40' prior: 50626730!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	((aRecord first = 'C') or: (aRecord first = 'A')) ifFalse:[ self error: 'Not a valid record indicator'].
	(aRecord first = 'C') ifTrue: [(aRecord size = 5 ) ifFalse: [self error: 'Record has invalid number of fields']].
	(aRecord first = 'A') ifTrue: [(aRecord size = 6) ifFalse: [self error: 'Record has invalid number of fields']].
	! !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:29:44'!
PASSED!

----SNAPSHOT----(26 June 2023 21:30:00) CuisUniversity-5832.image priorSource: 9366758!

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:32:15'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:32:16'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:32:16'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:32:16'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:32:16'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:32:16'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:32:16'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:34:58' prior: 50626784!
test02ImportingEmptyCsvGivesError

	self 
		should: [| importData |
	importData := self emptyImportData.
	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:35:35' prior: 50627019!
test02ImportingEmptyCsvGivesError
	| importData |
	importData := self emptyImportData.
	self 
		should: [	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:35:46' prior: 50627031!
test02ImportingEmptyCsvGivesError
	| importData |
	importData := self emptyImportData.
	self 
		should: [	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			| errorMessageText |
	errorMessageText := 'Record is empty'.
	self assert: anError messageText equals: errorMessageText].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:36:20' prior: 50627043!
test02ImportingEmptyCsvGivesError
	| importData errorMessageText |
	
	importData := self emptyImportData.
	errorMessageText := 'Record is empty'.
	self 
		should: [	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError | 	self assert: anError messageText equals: errorMessageText].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:37:34'!
assertCustomerImportValueWith: importData errorsWith: errorMessageText

	^ self 
		should: [	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError | 	self assert: anError messageText equals: errorMessageText]! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:37:34' prior: 50627056!
test02ImportingEmptyCsvGivesError
	| importData errorMessageText |
	
	importData := self emptyImportData.
	errorMessageText := 'Record is empty'.
	self assertCustomerImportValueWith: importData errorsWith: errorMessageText.! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:38:20' prior: 50626619!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [| importData |
	importData := self extraCustomerFieldsImportData.
	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:38:34' prior: 50627090!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [| importData |
	importData := self extraCustomerFieldsImportData.
	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			| errorMessageText |
	errorMessageText := 'Record has invalid number of fields'.
	self assert: anError messageText equals: errorMessageText].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:39:11' prior: 50627103!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	| errorMessageText importData |
	errorMessageText := 'Record has invalid number of fields'.
	importData := self extraCustomerFieldsImportData.
	self assertCustomerImportValueWith: importData errorsWith: errorMessageText.! !

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:39:14'!
PASSED!

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:39:15'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:39:15'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:39:15'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:39:15'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:39:15'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:39:15'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:39:15'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:39:25' prior: 50626631!
test04ImportingCsvWithExtraAddressFieldsGivesError

	| errorMessageText importData |
	self 
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].
		
		self assertCustomerImportValueWith: importData errorsWith: errorMessageText.! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:40:00' prior: 50627158!
test04ImportingCsvWithExtraAddressFieldsGivesError

	| errorMessageText importData |
	importData := self extraAddressFieldsImportData.
	errorMessageText := 'Record has invalid number of fields'.
		
		self assertCustomerImportValueWith: importData errorsWith: errorMessageText.! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:40:03' prior: 50627173!
test04ImportingCsvWithExtraAddressFieldsGivesError

	| errorMessageText importData |
	importData := self extraAddressFieldsImportData.
	errorMessageText := 'Record has invalid number of fields'.
		
	self assertCustomerImportValueWith: importData errorsWith: errorMessageText.! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:40:11' prior: 50627185!
test04ImportingCsvWithExtraAddressFieldsGivesError

	| errorMessageText importData |
	importData := self extraAddressFieldsImportData.
	errorMessageText := 'Record has invalid number of fields'.
	self assertCustomerImportValueWith: importData errorsWith: errorMessageText.! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:15:57' prior: 50627197!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:15:08' prior: 50627118!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:41:18' prior: 50627221!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has more fields than allowed'].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:22:00' prior: 50627080!
test02ImportingEmptyCsvGivesError

	self 
		should: [CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'].! !

!methodRemoval: ImportTest #assertCustomerImportValueWith:errorsWith: stamp: 'JV 6/26/2023 21:41:45'!
assertCustomerImportValueWith: importData errorsWith: errorMessageText

	^ self 
		should: [	CustomerImporter valueFrom: importData into: session.]
		raise: Error
		withExceptionDo: [ :anError | 	self assert: anError messageText equals: errorMessageText]!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:42:46' prior: 50627245!
test02ImportingEmptyCsvGivesError

	self 
		should: [ | ci |ci := CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'.
			self assert: ''].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:45:27' prior: 50627266!
test02ImportingEmptyCsvGivesError

	self 
		should: [ CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'.
			self assert: session numberOfCustomers = 0].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:45:57' prior: 50627277!
test02ImportingEmptyCsvGivesError

	self 
		should: [ CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'.
			self assert: session numberOfCustomers = 0].! !
!ImportTest methodsFor: 'assertions' stamp: 'JV 6/26/2023 21:46:30'!
numberOfCustomers

	^ (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'assertions' stamp: 'JV 6/26/2023 21:46:30' prior: 50624427!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:46:46' prior: 50627289!
test02ImportingEmptyCsvGivesError

	self 
		should: [ CustomerImporter valueFrom: self emptyImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record is empty'.
			self assert: self numberOfCustomers = 0].! !

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:46:47'!
PASSED!

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:46:48'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:46:48'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:46:48'!
FAILURE!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:46:48'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:46:48'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:46:48'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:46:48'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:46:51'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:47:20' prior: 50627233!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:47:24'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:47:24'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:25'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:25'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:47:25'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:25'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:25'!
FAILURE!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:25'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:47:37' prior: 50627209!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'].! !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:47:40'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:47:57' prior: 50627354!
test03ImportingCsvWithExtraCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'.
			self assert: self numberOfCustomers = 0].! !

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:58'!
PASSED!

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:47:58'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:47:59'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:59'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:59'!
PASSED!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:47:59'!
PASSED!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:47:59'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:47:59'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:48:07' prior: 50627394!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'.
			self assert: self numberOfCustomers = 0].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:48:14' prior: 50626684!
test05ImportingCsvWithMissingAddressFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'.
			self assert: self numberOfCustomers = 0].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:48:20' prior: 50626856!
test06ImportingCsvWithMissingCustomerFieldsGivesError

	self 
		should: [CustomerImporter valueFrom: self missingCustomerFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'.
			self assert: self numberOfCustomers = 0].! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:48:25' prior: 50626899!
test07ImportingCsvWithInvalidCustomerIndicatorGivesError

	self 
		should: [CustomerImporter valueFrom: self invalidCustomerIndicatorImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Not a valid record indicator'.
			self assert: self numberOfCustomers = 0].! !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:48:28'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:48:28'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:48:29'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:48:29'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:48:29'!
FAILURE!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:48:29'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:48:29'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:48:32'!
FAILURE!

self numberOfCustomers !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:50:08' prior: 50626950!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	((aRecord first = 'C') or: (aRecord first = 'A')) ifFalse: [self error: 'Not a valid record indicator'].
	(aRecord first = 'C') ifTrue: [(aRecord size = 5 ) ifFalse: [self error: 'Record has invalid number of fields']].
	(aRecord first = 'A') ifTrue: [(aRecord size = 6) ifFalse: [self error: 'Record has invalid number of fields']].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:50:24' prior: 50627555!
assertValidRecord: aRecord
	aRecord isEmpty ifTrue: [self error: 'Record is empty'].
	((aRecord first = 'C') or: (aRecord first = 'A')) ifFalse: [self error: 'Not a valid record indicator'].
	(aRecord first = 'C') ifTrue: [(aRecord size = 5) ifFalse: [self error: 'Record has invalid number of fields']].
	(aRecord first = 'A') ifTrue: [(aRecord size = 6) ifFalse: [self error: 'Record has invalid number of fields']].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:52:33' prior: 50625752!
importRecord

	self isCustomerRecord ifTrue: [ self importCustomer ].
	self isAddressRecord ifTrue: [ self importAddress ].! !

!methodRemoval: CustomerImporter #importCustomerLine stamp: 'JV 6/26/2023 21:55:02'!
importCustomerLine

	| customerData |
			customerData := self splitStringsByCommasFrom: line.
			newCustomer := self newCustomerFrom: customerData.
			session persist: newCustomer!

!methodRemoval: CustomerImporter #importAddressLine stamp: 'JV 6/26/2023 21:55:06'!
importAddressLine

	| addressData newAddress |
			addressData := self splitStringsByCommasFrom: line.
			newAddress := self newAddressFrom: addressData.
			newCustomer addAddress: newAddress!

!methodRemoval: CustomerImporter #splitStringsByCommasFrom: stamp: 'JV 6/26/2023 21:56:26'!
splitStringsByCommasFrom: aLine

	^ aLine findTokens: $,!
!CustomerImporter methodsFor: 'evaluating' stamp: 'JV 6/26/2023 21:56:26' prior: 50626222!
createRecord

	record :=  line findTokens: $,.
	self assertValidRecord: record.
	^record.! !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:56:36'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:56:36'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:56:37'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:56:37'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:56:37'!
FAILURE!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:56:37'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:56:37'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:57:14'!
FAILURE!

self numberOfCustomers !

!testRun: #ImportTest #test01CustomerImporterImportsRecordsCorrectly stamp: 'JV 6/26/2023 21:57:59'!
PASSED!

!testRun: #ImportTest #test02ImportingEmptyCsvGivesError stamp: 'JV 6/26/2023 21:57:59'!
PASSED!

!testRun: #ImportTest #test03ImportingCsvWithExtraCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:57:59'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:57:59'!
FAILURE!

!testRun: #ImportTest #test05ImportingCsvWithMissingAddressFieldsGivesError stamp: 'JV 6/26/2023 21:58:00'!
FAILURE!

!testRun: #ImportTest #test06ImportingCsvWithMissingCustomerFieldsGivesError stamp: 'JV 6/26/2023 21:58:00'!
PASSED!

!testRun: #ImportTest #test07ImportingCsvWithInvalidCustomerIndicatorGivesError stamp: 'JV 6/26/2023 21:58:00'!
PASSED!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:58:02'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 21:58:29' prior: 50627473!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self halt.
	self
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'.
			self assert: self numberOfCustomers = 0].! !

self numberOfCustomers !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'JV 6/26/2023 21:59:38' prior: 50624462 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	self halt.! !

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:59:55'!
FAILURE!

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 21:59:56'!
PASSED!

self numberOfCustomers !

!testRun: #ImportTest #test04ImportingCsvWithExtraAddressFieldsGivesError stamp: 'JV 6/26/2023 22:01:05'!
FAILURE!
!CustomerImporter class methodsFor: 'importing' stamp: 'JV 6/26/2023 22:01:33' prior: 50624678!
valueFrom: aReadStream into: aSession
	self halt.
	^(self from: aReadStream into: aSession) value! !
!ImportTest methodsFor: 'tests' stamp: 'JV 6/26/2023 22:01:42' prior: 50627682!
test04ImportingCsvWithExtraAddressFieldsGivesError

	self
		should: [CustomerImporter valueFrom: self extraAddressFieldsImportData into: session.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: 'Record has invalid number of fields'.
			self assert: self numberOfCustomers = 0].! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'JV 6/26/2023 22:01:47' prior: 50627697 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.! !

self numberOfCustomers !
!DataBaseSession methodsFor: 'persistance' stamp: 'JV 6/26/2023 22:04:10' prior: 50624744!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self halt. self persistAddressesOf: anObject ].! !

----QUIT----(26 June 2023 22:05:37) CuisUniversity-5832.image priorSource: 9450883!