

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (3 June 2023 20:25:30) as E:\julia\Documents\UBA\Inge1\SmallTalk\MarsRoverReloaded\CuisUniversity-5832.image!


----End fileIn of E:\julia\Downloads\MarsRover-WithHeading.st----!

TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:26:38'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:26:43'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of E:\julia\Documents\UBA\Inge1\SmallTalk\23c1-ingsoft1\08-MarsRover-ElRegreso\MarsRover-WithHeading.st----!

----End fileIn of E:\julia\Documents\UBA\Inge1\SmallTalk\23c1-ingsoft1\08-MarsRover-ElRegreso\MarsRover-WithHe.st----!

----End fileIn of E:\julia\Documents\UBA\Inge1\SmallTalk\MarsRoverReloaded\MarsRover-WithHe.st----!

----End fileIn of E:\julia\Documents\UBA\Inge1\SmallTalk\MarsRoverReloaded\MarsRover-WithHe.st----!

----End fileIn of E:\julia\Documents\UBA\Inge1\SmallTalk\MarsRoverReloaded\MarsRover-WithHe.st----!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:42:48'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'no messages' stamp: 'JV 6/3/2023 20:42:43'!
test01MarsRoverMovesForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: mr.
	
	mr addChusma: log.
	
	mr moveForward.
	
	expectedLog := OrderedCollection with: 1@2.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:43:53'!
ERROR!
!Log class methodsFor: 'class initialization' stamp: 'JV 6/3/2023 20:44:08'!
for: mr 
	self shouldBeImplemented.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:44:38' prior: 50627500!
test01MarsRoverMovesForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr moveForward.
	
	expectedLog := OrderedCollection with: 1@2.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:44:42'!
ERROR!
!MarsRover methodsFor: 'addingChusmas' stamp: 'JV 6/3/2023 20:44:59'!
addChusma: log 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:45:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'addingChusmas' stamp: 'JV 6/3/2023 20:45:36' prior: 50627535!
addChusma: unChusma 
	chusmas add: unChusma.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:45:38'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 20:46:08' prior: 50627176!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self  ! !
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 20:46:39' prior: 50627556!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:46:43'!
ERROR!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:46:43'!
ERROR!
!Log methodsFor: 'showing' stamp: 'JV 6/3/2023 20:46:51'!
show
	self shouldBeImplemented.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:47:51'!
Object subclass: #Log
	instanceVariableNames: 'events'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'showing' stamp: 'JV 6/3/2023 20:47:49' prior: 50627576!
show
	^events copy.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:47:52'!
FAILURE!
!Log methodsFor: 'showing' stamp: 'JV 6/3/2023 20:48:17' overrides: 16920235!
initialize
	events := OrderedCollection new.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:48:23'!
FAILURE!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:48:23'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 20:50:14' prior: 50627248!
moveNorth
	
	position := position + (0@1).
	
	chusmas do: [ :chusma | chusma addPosition: position ].! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:50:16'!
ERROR!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:50:17'!
ERROR!
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 20:50:27'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 20:50:36' prior: 50627617!
addPosition: aPosition 
	events add: aPosition .! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:50:37'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:50:39'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:51:01'!
test02MarsRoverMovesForwardForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: mr.
	
	mr addChusma: log.
	
	mr moveForward moveForward.
	
	expectedLog := OrderedCollection with: 1@2 with: 1@3.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 20:51:06'!
ERROR!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:51:21' prior: 50627632!
test02MarsRoverMovesForwardForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr moveForward moveForward.
	
	expectedLog := OrderedCollection with: 1@2 with: 1@3.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 20:51:23'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 20:51:23'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 20:51:23'!
PASSED!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:52:24'!
Object subclass: #Window
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'no messages' stamp: 'JV 6/3/2023 20:52:20'!
test01MarsRoverMovesForwardThenWindowIsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	mr addChusma: window.
	
	mr moveForward.
	
	
	
	self assert: 1@2 equals: window show.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:52:31' prior: 50627677!
test01MarsRoverMovesForwardThenWindowIsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: window show.! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowIsLastPosition stamp: 'JV 6/3/2023 20:52:53'!
ERROR!
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 20:53:02'!
addPosition: aPosition 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 20:53:18'!
Object subclass: #Window
	instanceVariableNames: 'currentPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 20:53:16' prior: 50627701!
addPosition: aPosition 
	currentPosition := aPosition.! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowIsLastPosition stamp: 'JV 6/3/2023 20:53:20'!
ERROR!
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 20:53:27'!
show
	self shouldBeImplemented.! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 20:53:40' prior: 50627721!
show
	^currentPosition copy.! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowIsLastPosition stamp: 'JV 6/3/2023 20:53:41'!
PASSED!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowIsLastPosition stamp: 'JV 6/3/2023 20:53:41'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:58:40'!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una r, en el log se espera una linea con East"

	| mr |
	mr := MarsRover ! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:59:34' prior: 50627736!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una r, en el log se espera una linea con East"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr moveRight.
	
	expectedLog := OrderedCollection with: 1@1 with: 1@3.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:01:21' prior: 50627745!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una r, en el log se espera una linea con East"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: MarsRoverHeadingEast.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:01:48' prior: 50627761!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: MarsRoverHeadingEast.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:02:09' prior: 50627778!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: #East.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:02:13'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'JV 6/3/2023 21:04:39' prior: 50627206!
rotateRight
	
	head rotateRight.
	
	chusmas do: [ :chusma | chusma addDirection: head asSymbol ].! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 21:04:46'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 21:04:47'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:04:47'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:04:47'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:05:03'!
asSymbol
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:05:14' prior: 50627827!
asSymbol
	#East! !

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:05:15'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:05:28' prior: 50627832!
asSymbol
	^#East! !

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:05:44'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:05:44'!
ERROR!
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 21:05:49'!
addDirection: aRenameMe1 
	self shouldBeImplemented.! !
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 21:06:52' prior: 50627850!
addDirection: aDirection 
	events add: aDirection! !

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:06:55'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:07:14'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:08:19'!
test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una rl, en el log se espera una linea con East y otra con North"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'rl'.
	
	expectedLog := OrderedCollection with: #East with: #North. 
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:08:23'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'JV 6/3/2023 21:09:05' prior: 50627202!
rotateLeft
	
	head rotateLeft.
	
	chusmas do: [ :chusma | chusma addDirection: head asSymbol ]! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 21:09:08'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 21:09:08'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:09:08'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:09:08'!
ERROR!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:09:08'!
ERROR!
!MarsRoverHeadingNorth methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:09:16'!
asSymbol
	self shouldBeImplemented.! !
!MarsRoverHeadingNorth methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:09:25' prior: 50627912!
asSymbol
	^#North! !

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:09:26'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:09:36'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:11:27'!
test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una fr, en el log se espera una linea con 1@2 y otra con East"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'fr'.
	
	expectedLog := OrderedCollection with: 1@2 with: #East. 
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 21:11:30'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 21:11:30'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:11:30'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:11:30'!
PASSED!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JV 6/3/2023 21:11:30'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:11:42' prior: 50627928!
test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'fr'.
	
	expectedLog := OrderedCollection with: 1@2 with: #East. 
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:11:49' prior: 50627867!
test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'rl'.
	
	expectedLog := OrderedCollection with: #East with: #North. 
	
	self assert: expectedLog equals: log show.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:34:43'!
test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: window show.! !

!methodRemoval: WindowTest #test01MarsRoverMovesForwardThenWindowIsLastPosition stamp: 'JV 6/3/2023 21:34:52'!
test01MarsRoverMovesForwardThenWindowIsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: window show.!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:34:55'!
ERROR!
!Window methodsFor: 'remember' stamp: 'JV 6/3/2023 21:35:25'!
remember: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 21:40:32'!
Object subclass: #Window
	instanceVariableNames: 'currentPosition properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'remember' stamp: 'JV 6/3/2023 21:40:30' prior: 50628015!
remember: aProperty
	properties at: aProperty ifAbsentPut: nil.! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:40:35'!
ERROR!
!Window methodsFor: 'remember' stamp: 'JV 6/3/2023 21:41:01' overrides: 16920235!
initialize
	properties := Dictionary new.! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:41:11'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:42:03' prior: 50627989!
test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: (window show: #Position).! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:42:05'!
ERROR!
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 21:42:10'!
show: aRenameMe1 
	self shouldBeImplemented.! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 21:42:26' prior: 50628061!
show: aProperty 
	^properties at: aProperty.! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:42:27'!
FAILURE!

!methodRemoval: Window #show stamp: 'JV 6/3/2023 21:42:39'!
show
	^currentPosition copy.!

Object subclass: #Window
	instanceVariableNames: 'properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 21:42:45'!
Object subclass: #Window
	instanceVariableNames: 'properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 21:43:02'!
add: aPosition 
	events add: aPosition .! !
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 21:43:02'!
add: aPosition 
	currentPosition := aPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:43:02' prior: 50627605!
moveNorth
	
	position := position + (0@1).
	
	chusmas do: [ :chusma | chusma add: position ].! !

!methodRemoval: Log #addPosition: stamp: 'JV 6/3/2023 21:43:02'!
addPosition: aPosition 
	events add: aPosition .!

!methodRemoval: Window #addPosition: stamp: 'JV 6/3/2023 21:43:03'!
addPosition: aPosition 
	currentPosition := aPosition.!
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 21:44:32'!
addValue: aValue forProperty: aProperty
	properties at: aProperty put: aValue.! !

!methodRemoval: Window #add: stamp: 'JV 6/3/2023 21:44:37'!
add: aPosition 
	currentPosition := aPosition.!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:45:16'!
ERROR!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:45:16'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:46:00' prior: 50628097!
moveNorth
	
	position := position + (0@1).
	
	chusmas do: [ :chusma | chusma addValue: position forProperty: #Position ].! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:46:01'!
FAILURE!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:46:26'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:50:57'!
test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	
	mr addChusma: window.
	
	mr process: 'f'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: nil equals: (window show: #Direction).
	
	mr process: 'r'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	
	mr process: 'f'.
	self assert: 2@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	! !

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:50:59'!
ERROR!
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 21:52:28' prior: 50628065!
show: aProperty 
	^properties at: aProperty ifAbsent: [self error: 'No estaba recordando esa propiedad'].! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:52:31'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:52:31'!
ERROR!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:52:31'!
ERROR!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:52:46' prior: 50628142!
test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	window remember: #Direction.
	
	mr addChusma: window.
	
	mr process: 'f'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: nil equals: (window show: #Direction).
	
	mr process: 'r'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	
	mr process: 'f'.
	self assert: 2@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	! !

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:52:47'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'JV 6/3/2023 21:53:19' prior: 50627807!
rotateRight
	
	head rotateRight.
	
	chusmas do: [ :chusma | chusma addValue: head asSymbol forProperty: #Direction ].! !

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:53:21'!
ERROR!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:53:25'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:53:25'!
FAILURE!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:53:25'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:55:08' prior: 50627240!
moveEast
	
	position := position + (1@0).
	
	chusmas do: [ :chusma | chusma addValue: position forProperty: #Position ]! !

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:55:10'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:55:11'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 21:56:03'!
Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:56:07'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:56:07'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 21:56:31'!
ERROR!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JV 6/3/2023 21:56:31'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JV 6/3/2023 21:56:31'!
ERROR!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JV 6/3/2023 21:56:31'!
ERROR!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JV 6/3/2023 21:56:31'!
ERROR!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JV 6/3/2023 21:56:37'!
ERROR!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JV 6/3/2023 21:56:42'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JV 6/3/2023 21:56:42'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JV 6/3/2023 21:56:47'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 21:57:01'!
Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 21:57:41' prior: 50627563!
initializeAt: aPosition heading: aHeadingType

	position update: aPosition.
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.! !
!MarsRover methodsFor: 'testing' stamp: 'JV 6/3/2023 21:58:36' prior: 50627210!
isAt: aPosition heading: aHeadingType

	^position lastUpdate = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:58:53' prior: 50628244!
moveEast
	
	position update: position + (1@0).
	! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:00' prior: 50628127!
moveNorth
	
	position update: position + (0@1).
	
	chusmas do: [ :chusma | chusma addValue: position forProperty: #Position ].! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:04' prior: 50628398!
moveNorth
	
	position update: position + (0@1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:16' prior: 50627252!
moveSouth
	
	position update: position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:22' prior: 50627257!
moveWest
	
	position update: position + (-1@0)! !

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:02:33'!
Object subclass: #ChusmaBox
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 22:01:47' prior: 50628378!
initializeAt: aPosition heading: aHeadingType

	
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialValue: aPosition.! !
!ChusmaBox class methodsFor: 'no messages' stamp: 'JV 6/3/2023 22:04:10'!
for: chusmas withInitialValue: aPosition
	^self new initializeFor: chusmas withValue: aPosition. ! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:04:26' prior: 50628436!
for: chusmas withInitialValue: anInitialValue
	^self new initializeFor: chusmas withValue: anInitialValue. ! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:05:35'!
for: aChusmas withInitialContent: anInitialContent
	^self new initializeFor: aChusmas withValue: anInitialContent. ! !

!methodRemoval: ChusmaBox class #for:withInitialValue: stamp: 'JV 6/3/2023 22:05:41'!
for: chusmas withInitialValue: anInitialValue
	^self new initializeFor: chusmas withValue: anInitialValue. !

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:06:13'!
Object subclass: #ChusmaBox
	instanceVariableNames: 'chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:06:15'!
Object subclass: #ChusmaBox
	instanceVariableNames: 'chusmas content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ChusmaBox methodsFor: 'no messages' stamp: 'JV 6/3/2023 22:06:12'!
initializeFor: aChusmas withValue: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.! !
!ChusmaBox methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:06:34'!
initializeFor: aChusmas withContent: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:06:34' prior: 50628450!
for: aChusmas withInitialContent: anInitialContent
	^self new initializeFor: aChusmas withContent: anInitialContent. ! !

!methodRemoval: ChusmaBox #initializeFor:withValue: stamp: 'JV 6/3/2023 22:06:34'!
initializeFor: aChusmas withValue: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JV 6/3/2023 22:06:43'!
ERROR!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JV 6/3/2023 22:06:43'!
ERROR!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JV 6/3/2023 22:06:44'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JV 6/3/2023 22:06:48'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 22:07:05' prior: 50628427!
initializeAt: aPosition heading: aHeadingType

	
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JV 6/3/2023 22:07:06'!
ERROR!
!ChusmaBox methodsFor: 'updates' stamp: 'JV 6/3/2023 22:07:15'!
lastUpdate
	self shouldBeImplemented.! !
!ChusmaBox methodsFor: 'updates' stamp: 'JV 6/3/2023 22:07:21' prior: 50628572!
lastUpdate
	^content.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JV 6/3/2023 22:07:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JV 6/3/2023 22:07:29'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JV 6/3/2023 22:07:29'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 22:07:30'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 22:07:42' prior: 50628405!
moveNorth
	
	position update: (position + (0@1)).
	
	! !

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 22:07:44'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 22:08:15' prior: 50628593!
moveNorth
	
	position update: position lastUpdate + (0@1).
	
	! !

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 22:08:16'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JV 6/3/2023 22:08:24'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JV 6/3/2023 22:08:24'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JV 6/3/2023 22:08:24'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 22:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JV 6/3/2023 22:08:24'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JV 6/3/2023 22:08:25'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JV 6/3/2023 22:08:25'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JV 6/3/2023 22:08:25'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JV 6/3/2023 22:08:25'!
FAILURE!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JV 6/3/2023 22:08:25'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JV 6/3/2023 22:08:25'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JV 6/3/2023 22:08:25'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JV 6/3/2023 22:08:25'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JV 6/3/2023 22:08:25'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JV 6/3/2023 22:08:25'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JV 6/3/2023 22:08:27'!
FAILURE!

position lastUpdate !

Object new update: 4.!

ProtoObject subclass: #ChusmaBox
	instanceVariableNames: 'chusmas content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----STARTUP---- (3 June 2023 22:13:53) as E:\julia\Documents\UBA\Inge1\SmallTalk\MarsRoverReloaded\CuisUniversity-5832.image!


!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:10'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:10'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23'!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12'!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31'!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17'!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11'!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59'!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51'!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45'!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39'!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31'!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19'!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14'!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05'!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00'!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52'!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31'!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38'!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45'!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54'!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47'!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45'!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26'!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49'!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02'!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12'!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17'!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24'!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20'!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44'!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32'!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51'!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19'!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51'!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21'!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24'!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01'!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53'!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12'!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34'!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32'!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26'!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50'!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:14'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:14'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30'!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:15'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:15'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20'!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44'!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38'!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24'!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53'!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59'!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:15'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:16'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35'!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:16'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:16'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50629012!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50629016!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50628999!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50629003!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:16'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:16'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50629012!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50629016!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50628999!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50629003!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:17'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:17'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50629012!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50629016!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50628999!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50629003!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:17'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:17'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50629012!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50629016!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50628999!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50629003!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:18'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:18'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:18'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:18'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:18'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:18'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50628692!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50628699!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50628707!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50628715!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50628723!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50628731!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50628739!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50628747!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50628761!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50628769!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50628777!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50628785!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50628793!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50628801!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50628810!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50628819!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50628823!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50628827!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50628831!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50628835!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:19'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:19'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50628863!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50628867!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50628872!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50628878!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50628882!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50628886!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50628890!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50628894!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50628898!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50628902!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50628908!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50628912!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50628916!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50628920!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50628924!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50628928!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50628932!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50628936!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50628940!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50628944!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50628948!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50628954!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:20'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:20'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50628977!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:20'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:20'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50628999!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629003!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50629007!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629012!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629016!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50629020!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:20'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:20'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50629035!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629057 overrides: 50629579!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629062 overrides: 50629584!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629067 overrides: 50629564!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629072 overrides: 50629569!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629093 overrides: 50629579!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629098 overrides: 50629584!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629103 overrides: 50629564!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629108 overrides: 50629569!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629129 overrides: 50629579!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629134 overrides: 50629584!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629139 overrides: 50629564!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629144 overrides: 50629569!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:21'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629165 overrides: 50629579!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629170 overrides: 50629584!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629175 overrides: 50629564!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629180 overrides: 50629569!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:22'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:22'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50629229!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50629237!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50629246!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50629255!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50629264!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50629273!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50629282!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50629291!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50629306!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50629314!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50629323!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50629332!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50629341!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50629350!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50629359!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50629369!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50629373!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50629377!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50629381!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50629385!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:22'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:22'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50629414!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50629419!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50629425!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50629431!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50629436!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50629441!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50629446!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629451!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629455!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50629459!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50629465!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50629470!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50629475!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50629480!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629485!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50629489!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629493!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50629497!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50629501!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50629506!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50629511!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50629518!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:23'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:23'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50629542!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:23'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:23'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629564!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629569!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50629574!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629579!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629584!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50629589!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50629605!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629627 overrides: 50630123!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629632 overrides: 50630128!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629637 overrides: 50630108!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629642 overrides: 50630113!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629664 overrides: 50630123!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629669 overrides: 50630128!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629674 overrides: 50630108!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629679 overrides: 50630113!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:24'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629701 overrides: 50630123!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629706 overrides: 50630128!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629711 overrides: 50630108!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629716 overrides: 50630113!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:25'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:25'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50629738 overrides: 50630123!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50629743 overrides: 50630128!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629748 overrides: 50630108!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629753 overrides: 50630113!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:25'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:25'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50629773!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50629781!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50629790!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50629799!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50629808!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50629817!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50629826!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50629835!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50629850!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50629858!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50629867!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50629876!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50629885!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50629894!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50629903!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50629913!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50629917!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50629921!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50629925!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50629929!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:26'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:26'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50629958!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50629963!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50629969!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50629975!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50629980!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50629985!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50629990!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50629995!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50629999!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50630003!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50630009!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50630014!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50630019!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50630024!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50630029!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50630033!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50630037!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50630041!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50630045!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50630050!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50630055!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50630062!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50630086!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50630108!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50630113!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50630118!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50630123!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50630128!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50630133!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50630149!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:27'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50630171 overrides: 50630667!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50630176 overrides: 50630672!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50630181 overrides: 50630652!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50630186 overrides: 50630657!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:28'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JV 6/3/2023 22:14:28'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50630208 overrides: 50630667!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50630213 overrides: 50630672!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50630218 overrides: 50630652!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50630223 overrides: 50630657!
rotateRight
	
	^marsRover headEast! !

----STARTUP---- (3 June 2023 22:14:31) as E:\julia\Documents\UBA\Inge1\SmallTalk\MarsRoverReloaded\CuisUniversity-5832.image!


!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:26'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:26'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12'!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31'!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17'!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11'!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59'!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51'!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45'!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39'!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31'!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19'!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14'!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05'!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00'!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52'!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31'!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38'!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45'!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54'!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47'!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45'!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26'!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49'!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02'!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12'!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17'!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24'!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20'!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44'!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32'!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51'!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19'!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51'!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21'!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24'!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01'!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53'!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12'!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34'!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32'!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26'!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50'!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:31'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:31'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30'!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:32'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:32'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20'!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44'!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38'!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24'!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53'!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59'!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:33'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:33'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35'!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:33'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:33'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50631111!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50631115!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50631098!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50631102!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:34'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:34'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50631111!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50631115!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50631098!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50631102!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:34'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:34'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50631111!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50631115!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50631098!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50631102!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:35'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:35'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' overrides: 50631111!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' overrides: 50631115!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' overrides: 50631098!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' overrides: 50631102!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:36'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:36'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:36'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #WindowTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:36'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23'!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50630798!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50630806!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50630814!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50630822!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50630830!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50630838!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50630846!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50630860!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50630868!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50630876!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50630884!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50630892!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50630900!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50630909!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50630918!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50630922!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50630926!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50630930!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50630934!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50630962!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50630966!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50630971!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50630977!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50630981!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50630985!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50630989!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50630993!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50630997!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50631001!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50631007!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50631011!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50631015!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50631019!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631023!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50631027!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631031!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50631035!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50631039!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50631043!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50631047!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50631053!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:41'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:41'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50631076!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:42'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:42'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631098!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631102!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50631106!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631111!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631115!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50631119!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:43'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:43'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50631134!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:43'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:43'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631156 overrides: 50631677!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631161 overrides: 50631682!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631166 overrides: 50631662!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631171 overrides: 50631667!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:44'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:44'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631192 overrides: 50631677!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631197 overrides: 50631682!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631202 overrides: 50631662!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631207 overrides: 50631667!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:44'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:45'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631228 overrides: 50631677!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631233 overrides: 50631682!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631238 overrides: 50631662!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631243 overrides: 50631667!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:45'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:45'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631264 overrides: 50631677!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631269 overrides: 50631682!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631274 overrides: 50631662!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631279 overrides: 50631667!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:46'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:46'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50631327!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50631335!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50631344!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50631353!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50631362!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50631371!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50631380!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50631389!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50631404!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50631412!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50631421!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50631430!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50631439!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50631448!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50631457!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50631467!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50631471!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50631475!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50631479!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50631483!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:48'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:48'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50631512!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50631517!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50631523!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50631529!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50631534!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50631539!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50631544!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631549!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631553!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50631557!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50631563!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50631568!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50631573!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50631578!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631583!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50631587!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631591!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50631595!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50631599!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50631604!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50631609!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50631616!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:51'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:51'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50631640!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:51'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:51'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631662!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631667!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50631672!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631677!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631682!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50631687!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:52'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:52'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50631703!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:52'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:52'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631725 overrides: 50632221!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631730 overrides: 50632226!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631735 overrides: 50632206!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631740 overrides: 50632211!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:53'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:53'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631762 overrides: 50632221!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631767 overrides: 50632226!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631772 overrides: 50632206!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631777 overrides: 50632211!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:54'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:54'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631799 overrides: 50632221!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631804 overrides: 50632226!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631809 overrides: 50632206!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631814 overrides: 50632211!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:55'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:55'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50631836 overrides: 50632221!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50631841 overrides: 50632226!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50631846 overrides: 50632206!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50631851 overrides: 50632211!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:55'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:55'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50631871!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50631879!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50631888!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50631897!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50631906!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50631915!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50631924!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50631933!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50631948!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50631956!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50631965!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50631974!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50631983!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50631992!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50632001!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50632011!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50632015!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50632019!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50632023!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50632027!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:22:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50632056!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50632061!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50632067!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50632073!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50632078!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50632083!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50632088!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632093!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632097!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50632101!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50632107!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50632112!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50632117!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50632122!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632127!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50632131!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632135!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50632139!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50632143!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50632148!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50632153!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50632160!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:00'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:00'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50632184!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:01'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:01'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632206!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632211!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50632216!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632221!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632226!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50632231!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:02'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:02'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50632247!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:02'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:02'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632269 overrides: 50632765!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632274 overrides: 50632770!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632279 overrides: 50632750!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632284 overrides: 50632755!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:03'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:03'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632306 overrides: 50632765!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632311 overrides: 50632770!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632316 overrides: 50632750!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632321 overrides: 50632755!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:04'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:04'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632343 overrides: 50632765!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632348 overrides: 50632770!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632353 overrides: 50632750!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632358 overrides: 50632755!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:04'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:04'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632380 overrides: 50632765!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632385 overrides: 50632770!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632390 overrides: 50632750!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632395 overrides: 50632755!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:05'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:05'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50632415!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50632423!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50632432!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50632441!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50632450!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50632459!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50632468!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50632477!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50632492!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50632500!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50632509!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50632518!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50632527!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50632536!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50632545!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50632555!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50632559!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50632563!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50632567!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50632571!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50632600!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50632605!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50632611!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50632617!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50632622!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50632627!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50632632!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632637!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632641!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50632645!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50632651!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50632656!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50632661!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50632666!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632671!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50632675!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632679!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50632683!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50632687!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50632692!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50632697!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50632704!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:10'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:10'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50632728!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:10'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:10'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632750!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632755!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50632760!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632765!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632770!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50632775!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:11'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:11'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50632791!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:11'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:12'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632813 overrides: 50633309!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632818 overrides: 50633314!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632823 overrides: 50633294!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632828 overrides: 50633299!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:12'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:12'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632850 overrides: 50633309!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632855 overrides: 50633314!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632860 overrides: 50633294!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632865 overrides: 50633299!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:13'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:13'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632887 overrides: 50633309!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632892 overrides: 50633314!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632897 overrides: 50633294!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632902 overrides: 50633299!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:14'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:14'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50632924 overrides: 50633309!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50632929 overrides: 50633314!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50632934 overrides: 50633294!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50632939 overrides: 50633299!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:14'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:14'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:21:23' prior: 50632959!
test01DoesNotMoveWhenNoCommand

	self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: '' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:12' prior: 50632967!
test02IsAtFailsForDifferentPosition

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:31' prior: 50632976!
test03IsAtFailsForDifferentHeading

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north . 
	
	self deny: (marsRover isAt: 1@1 heading: self south)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:17' prior: 50632985!
test04IncrementsYAfterMovingForwardWhenHeadingNorth

	self 
		assertIsAt: 1@3 
		heading: self north 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:30:11' prior: 50632994!
test06DecrementsYAfterMovingBackwardsWhenHeadingNorth

	self 
		assertIsAt: 1@1 
		heading: self north 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:59' prior: 50633003!
test07PointToEashAfterRotatingRightWhenHeadingNorth

	self 
		assertIsAt: 1@2 
		heading: self east 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:51' prior: 50633012!
test08PointsToWestAfterRotatingLeftWhenPointingNorth

	self 
		assertIsAt: 1@2 
		heading: self west 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:45' prior: 50633021!
test09DoesNotProcessInvalidCommand

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: self north.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: self north) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:39' prior: 50633036!
test10CanProcessMoreThanOneCommand

	self 
		assertIsAt: 1@4 
		heading: self north 
		afterProcessing: 'ff' 
		whenStartingAt: 1@2 
		heading: self north 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:31' prior: 50633044!
test11IncrementsXAfterMovingForwareWhenHeadingEast

	self 
		assertIsAt: 2@2 
		heading: self east 
		afterProcessing: 'f' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:19' prior: 50633053!
test12DecrementsXAfterMovingBackwardWhenHeadingEast

	self 
		assertIsAt: 0@2 
		heading: self east 
		afterProcessing: 'b' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:14' prior: 50633062!
test13PointsToSouthAfterRotatingRightWhenHeadingEast

		self 
		assertIsAt: 1@2 
		heading: self south 
		afterProcessing: 'r' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:05' prior: 50633071!
test14PointsToNorthAfterRotatingLeftWhenPointingEast

		self 
		assertIsAt: 1@2 
		heading: self north 
		afterProcessing: 'l' 
		whenStartingAt: 1@2 
		heading: self east 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:29:00' prior: 50633080!
test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth

	self 
		assertIsAt: 1@1 
		heading: self west 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self south 
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 10/7/2021 20:28:52' prior: 50633089!
test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest

	self 
		assertIsAt: 0@2 
		heading: self north 
		afterProcessing: 'ffblrr' 
		whenStartingAt: 1@2 
		heading: self west 
! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:31' prior: 50633099!
east

	^ MarsRoverHeadingEast ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:38' prior: 50633103!
north

	^ MarsRoverHeadingNorth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:45' prior: 50633107!
south

	^ MarsRoverHeadingSouth ! !
!MarsRoverTest methodsFor: 'headings' stamp: 'HAW 10/7/2021 20:09:54' prior: 50633111!
west

	^ MarsRoverHeadingWest ! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'HAW 10/7/2021 20:20:47' prior: 50633115!
assertIsAt: newPosition heading: newHeadingType afterProcessing: commands whenStartingAt: startPosition heading: startHeadingType

	| marsRover |
	
	marsRover := MarsRover at: startPosition heading: startHeadingType. 
	
	marsRover process: commands.
	
	self assert: (marsRover isAt: newPosition heading: newHeadingType)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45' prior: 50633144!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26' prior: 50633149!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:10:49' prior: 50633155!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:02' prior: 50633161!
headEast
	
	head := MarsRoverHeadingEast for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:12' prior: 50633166!
headNorth
	
	head := MarsRoverHeadingNorth for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:17' prior: 50633171!
headSouth
	
	head := MarsRoverHeadingSouth for: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:17:24' prior: 50633176!
headWest
	
	head := MarsRoverHeadingWest for: self ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50633181!
rotateLeft
	
	head rotateLeft! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50633185!
rotateRight
	
	head rotateRight! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:16:32' prior: 50633189!
isAt: aPosition heading: aHeadingType

	^position = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51' prior: 50633195!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19' prior: 50633200!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51' prior: 50633205!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21' prior: 50633210!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50633215!
moveBackward
	
	head moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01' prior: 50633219!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50633223!
moveForward
	
	head moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12' prior: 50633227!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34' prior: 50633231!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32' prior: 50633236!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26' prior: 50633241!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50' prior: 50633248!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:19'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:19'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:10:30' prior: 50633272!
at: aPosition heading: aHeadingType
	
	^self new initializeAt: aPosition heading: aHeadingType! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:20'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:20'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50633294!
rotateLeft

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50633299!
rotateRight

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 10/7/2021 20:15:38' prior: 50633304!
isHeading: aHeadingType

	^self isKindOf: aHeadingType ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50633309!
moveBackward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50633314!
moveForward

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'initialization' stamp: 'HAW 10/7/2021 20:11:59' prior: 50633319!
initializeFor: aMarsRover 
	
	marsRover := aMarsRover.! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:21'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:21'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 10/7/2021 20:11:35' prior: 50633335!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:21'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:21'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50633357 overrides: 50633853!
moveBackward
	
	^marsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50633362 overrides: 50633858!
moveForward
	
	^marsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50633367 overrides: 50633838!
rotateLeft
	
	^marsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50633372 overrides: 50633843!
rotateRight
	
	^marsRover headSouth! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:22'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:22'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50633394 overrides: 50633853!
moveBackward
	
	^marsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50633399 overrides: 50633858!
moveForward
	
	^marsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50633404 overrides: 50633838!
rotateLeft
	
	^marsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50633409 overrides: 50633843!
rotateRight
	
	^marsRover headEast! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:22'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:23'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50633431 overrides: 50633853!
moveBackward
	
	^marsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50633436 overrides: 50633858!
moveForward
	
	^marsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50633441 overrides: 50633838!
rotateLeft
	
	^marsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50633446 overrides: 50633843!
rotateRight
	
	^marsRover headWest! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:23'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:23'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:24' prior: 50633468 overrides: 50633853!
moveBackward

	^marsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 10/7/2021 20:13:53' prior: 50633473 overrides: 50633858!
moveForward
	
	^marsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:20' prior: 50633478 overrides: 50633838!
rotateLeft
	
	^marsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 10/7/2021 20:14:44' prior: 50633483 overrides: 50633843!
rotateRight
	
	^marsRover headNorth! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:24'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogTest methodsFor: 'no messages' stamp: 'JV 6/3/2023 20:42:43'!
test01MarsRoverMovesForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: mr.
	
	mr addChusma: log.
	
	mr moveForward.
	
	expectedLog := OrderedCollection with: 1@2.
	
	self assert: expectedLog equals: log show.! !
!Log class methodsFor: 'class initialization' stamp: 'JV 6/3/2023 20:44:08'!
for: mr 
	self shouldBeImplemented.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:44:38' prior: 50634038!
test01MarsRoverMovesForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr moveForward.
	
	expectedLog := OrderedCollection with: 1@2.
	
	self assert: expectedLog equals: log show.! !
!MarsRover methodsFor: 'addingChusmas' stamp: 'JV 6/3/2023 20:44:59'!
addChusma: log 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:24'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'addingChusmas' stamp: 'JV 6/3/2023 20:45:36' prior: 50634066!
addChusma: unChusma 
	chusmas add: unChusma.! !
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 20:46:08' prior: 50633699!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self  ! !
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 20:46:39' prior: 50634084!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.! !
!Log methodsFor: 'showing' stamp: 'JV 6/3/2023 20:46:51'!
show
	self shouldBeImplemented.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:25'!
Object subclass: #Log
	instanceVariableNames: 'events'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'showing' stamp: 'JV 6/3/2023 20:47:49' prior: 50634098!
show
	^events copy.! !
!Log methodsFor: 'showing' stamp: 'JV 6/3/2023 20:48:17' overrides: 16920235!
initialize
	events := OrderedCollection new.! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 20:50:14' prior: 50633771!
moveNorth
	
	position := position + (0@1).
	
	chusmas do: [ :chusma | chusma addPosition: position ].! !
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 20:50:27'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 20:50:36' prior: 50634123!
addPosition: aPosition 
	events add: aPosition .! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:51:01'!
test02MarsRoverMovesForwardForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: mr.
	
	mr addChusma: log.
	
	mr moveForward moveForward.
	
	expectedLog := OrderedCollection with: 1@2 with: 1@3.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:51:21' prior: 50634131!
test02MarsRoverMovesForwardForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr moveForward moveForward.
	
	expectedLog := OrderedCollection with: 1@2 with: 1@3.
	
	self assert: expectedLog equals: log show.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:26'!
Object subclass: #Window
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!WindowTest methodsFor: 'no messages' stamp: 'JV 6/3/2023 20:52:20'!
test01MarsRoverMovesForwardThenWindowIsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	mr addChusma: window.
	
	mr moveForward.
	
	
	
	self assert: 1@2 equals: window show.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:52:31' prior: 50634163!
test01MarsRoverMovesForwardThenWindowIsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: window show.! !
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 20:53:02'!
addPosition: aPosition 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:27'!
Object subclass: #Window
	instanceVariableNames: 'currentPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 20:53:16' prior: 50634184!
addPosition: aPosition 
	currentPosition := aPosition.! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 20:53:27'!
show
	self shouldBeImplemented.! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 20:53:40' prior: 50634200!
show
	^currentPosition copy.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:58:40'!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una r, en el log se espera una linea con East"

	| mr |
	mr := MarsRover ! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 20:59:34' prior: 50634208!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una r, en el log se espera una linea con East"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr moveRight.
	
	expectedLog := OrderedCollection with: 1@1 with: 1@3.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:01:21' prior: 50634217!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una r, en el log se espera una linea con East"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: MarsRoverHeadingEast.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:01:48' prior: 50634233!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: MarsRoverHeadingEast.
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:02:09' prior: 50634250!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: #East.
	
	self assert: expectedLog equals: log show.! !
!MarsRover methodsFor: 'heading' stamp: 'JV 6/3/2023 21:04:39' prior: 50633729!
rotateRight
	
	head rotateRight.
	
	chusmas do: [ :chusma | chusma addDirection: head asSymbol ].! !
!MarsRoverHeadingEast methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:05:03'!
asSymbol
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:05:14' prior: 50634281!
asSymbol
	#East! !
!MarsRoverHeadingEast methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:05:28' prior: 50634286!
asSymbol
	^#East! !
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 21:05:49'!
addDirection: aRenameMe1 
	self shouldBeImplemented.! !
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 21:06:52' prior: 50634293!
addDirection: aDirection 
	events add: aDirection! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:08:19'!
test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una rl, en el log se espera una linea con East y otra con North"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'rl'.
	
	expectedLog := OrderedCollection with: #East with: #North. 
	
	self assert: expectedLog equals: log show.! !
!MarsRover methodsFor: 'heading' stamp: 'JV 6/3/2023 21:09:05' prior: 50633725!
rotateLeft
	
	head rotateLeft.
	
	chusmas do: [ :chusma | chusma addDirection: head asSymbol ]! !
!MarsRoverHeadingNorth methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:09:16'!
asSymbol
	self shouldBeImplemented.! !
!MarsRoverHeadingNorth methodsFor: 'symbols' stamp: 'JV 6/3/2023 21:09:25' prior: 50634325!
asSymbol
	^#North! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:11:27'!
test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection
"Si el MarsRover empieza en 1@1 apuntando al norte y se procesa una fr, en el log se espera una linea con 1@2 y otra con East"

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'fr'.
	
	expectedLog := OrderedCollection with: 1@2 with: #East. 
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:11:42' prior: 50634333!
test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'fr'.
	
	expectedLog := OrderedCollection with: 1@2 with: #East. 
	
	self assert: expectedLog equals: log show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:11:49' prior: 50634302!
test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	
	mr addChusma: log.
	
	mr process: 'rl'.
	
	expectedLog := OrderedCollection with: #East with: #North. 
	
	self assert: expectedLog equals: log show.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:34:43'!
test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: window show.! !

!methodRemoval: WindowTest #test01MarsRoverMovesForwardThenWindowIsLastPosition stamp: 'JC 6/3/2023 22:23:29'!
test01MarsRoverMovesForwardThenWindowIsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: window show.!
!Window methodsFor: 'remember' stamp: 'JV 6/3/2023 21:35:25'!
remember: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:29'!
Object subclass: #Window
	instanceVariableNames: 'currentPosition properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'remember' stamp: 'JV 6/3/2023 21:40:30' prior: 50634398!
remember: aProperty
	properties at: aProperty ifAbsentPut: nil.! !
!Window methodsFor: 'remember' stamp: 'JV 6/3/2023 21:41:01' overrides: 16920235!
initialize
	properties := Dictionary new.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:42:03' prior: 50634376!
test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	
	mr addChusma: window.
	
	mr moveForward.	
	
	self assert: 1@2 equals: (window show: #Position).! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 21:42:10'!
show: aRenameMe1 
	self shouldBeImplemented.! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 21:42:26' prior: 50634432!
show: aProperty 
	^properties at: aProperty.! !

!methodRemoval: Window #show stamp: 'JC 6/3/2023 22:23:30'!
show
	^currentPosition copy.!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:30'!
Object subclass: #Window
	instanceVariableNames: 'properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:30'!
Object subclass: #Window
	instanceVariableNames: 'properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'adding' stamp: 'JV 6/3/2023 21:43:02'!
add: aPosition 
	events add: aPosition .! !
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 21:43:02'!
add: aPosition 
	currentPosition := aPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:43:02' prior: 50634117!
moveNorth
	
	position := position + (0@1).
	
	chusmas do: [ :chusma | chusma add: position ].! !

!methodRemoval: Log #addPosition: stamp: 'JC 6/3/2023 22:23:30'!
addPosition: aPosition 
	events add: aPosition .!

!methodRemoval: Window #addPosition: stamp: 'JC 6/3/2023 22:23:30'!
addPosition: aPosition 
	currentPosition := aPosition.!
!Window methodsFor: 'adding' stamp: 'JV 6/3/2023 21:44:32'!
addValue: aValue forProperty: aProperty
	properties at: aProperty put: aValue.! !

!methodRemoval: Window #add: stamp: 'JC 6/3/2023 22:23:31'!
add: aPosition 
	currentPosition := aPosition.!
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:46:00' prior: 50634466!
moveNorth
	
	position := position + (0@1).
	
	chusmas do: [ :chusma | chusma addValue: position forProperty: #Position ].! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:50:57'!
test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	
	mr addChusma: window.
	
	mr process: 'f'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: nil equals: (window show: #Direction).
	
	mr process: 'r'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	
	mr process: 'f'.
	self assert: 2@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	! !
!Window methodsFor: 'showing' stamp: 'JV 6/3/2023 21:52:28' prior: 50634436!
show: aProperty 
	^properties at: aProperty ifAbsent: [self error: 'No estaba recordando esa propiedad'].! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 21:52:46' prior: 50634495!
test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection
	| mr window |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	window remember: #Position.
	window remember: #Direction.
	
	mr addChusma: window.
	
	mr process: 'f'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: nil equals: (window show: #Direction).
	
	mr process: 'r'.
	self assert: 1@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	
	mr process: 'f'.
	self assert: 2@2 equals: (window show: #Position).
	self assert: #East equals: (window show: #Direction).
	! !
!MarsRover methodsFor: 'heading' stamp: 'JV 6/3/2023 21:53:19' prior: 50634275!
rotateRight
	
	head rotateRight.
	
	chusmas do: [ :chusma | chusma addValue: head asSymbol forProperty: #Direction ].! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:55:08' prior: 50633763!
moveEast
	
	position := position + (1@0).
	
	chusmas do: [ :chusma | chusma addValue: position forProperty: #Position ]! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'head chusmas position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 21:57:41' prior: 50634091!
initializeAt: aPosition heading: aHeadingType

	position update: aPosition.
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.! !
!MarsRover methodsFor: 'testing' stamp: 'JV 6/3/2023 21:58:36' prior: 50633733!
isAt: aPosition heading: aHeadingType

	^position lastUpdate = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:58:53' prior: 50634556!
moveEast
	
	position update: position + (1@0).
	! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:00' prior: 50634488!
moveNorth
	
	position update: position + (0@1).
	
	chusmas do: [ :chusma | chusma addValue: position forProperty: #Position ].! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:04' prior: 50634614!
moveNorth
	
	position update: position + (0@1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:16' prior: 50633775!
moveSouth
	
	position update: position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 21:59:22' prior: 50633780!
moveWest
	
	position update: position + (-1@0)! !

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:33'!
Object subclass: #ChusmaBox
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 22:01:47' prior: 50634594!
initializeAt: aPosition heading: aHeadingType

	
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialValue: aPosition.! !
!ChusmaBox class methodsFor: 'no messages' stamp: 'JV 6/3/2023 22:04:10'!
for: chusmas withInitialValue: aPosition
	^self new initializeFor: chusmas withValue: aPosition. ! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:04:26' prior: 50634652!
for: chusmas withInitialValue: anInitialValue
	^self new initializeFor: chusmas withValue: anInitialValue. ! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:05:35'!
for: aChusmas withInitialContent: anInitialContent
	^self new initializeFor: aChusmas withValue: anInitialContent. ! !

!methodRemoval: ChusmaBox class #for:withInitialValue: stamp: 'JC 6/3/2023 22:23:33'!
for: chusmas withInitialValue: anInitialValue
	^self new initializeFor: chusmas withValue: anInitialValue. !

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:34'!
Object subclass: #ChusmaBox
	instanceVariableNames: 'chusmas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:23:34'!
Object subclass: #ChusmaBox
	instanceVariableNames: 'chusmas content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ChusmaBox methodsFor: 'no messages' stamp: 'JV 6/3/2023 22:06:12'!
initializeFor: aChusmas withValue: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.! !
!ChusmaBox methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:06:34'!
initializeFor: aChusmas withContent: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JV 6/3/2023 22:06:34' prior: 50634666!
for: aChusmas withInitialContent: anInitialContent
	^self new initializeFor: aChusmas withContent: anInitialContent. ! !

!methodRemoval: ChusmaBox #initializeFor:withValue: stamp: 'JC 6/3/2023 22:23:34'!
initializeFor: aChusmas withValue: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.!
!MarsRover methodsFor: 'initialization' stamp: 'JV 6/3/2023 22:07:05' prior: 50634643!
initializeAt: aPosition heading: aHeadingType

	
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition.! !
!ChusmaBox methodsFor: 'updates' stamp: 'JV 6/3/2023 22:07:15'!
lastUpdate
	self shouldBeImplemented.! !
!ChusmaBox methodsFor: 'updates' stamp: 'JV 6/3/2023 22:07:21' prior: 50634729!
lastUpdate
	^content.! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 22:07:42' prior: 50634621!
moveNorth
	
	position update: (position + (0@1)).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'JV 6/3/2023 22:08:15' prior: 50634737!
moveNorth
	
	position update: position lastUpdate + (0@1).
	
	! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:24:42'!
FAILURE!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 22:24:42'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 22:24:42'!
FAILURE!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 22:24:42'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 22:24:42'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 22:24:42'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 22:24:42'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 22:24:42'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:25:59' prior: 50634742!
moveNorth
	
	position updateContent: position lastUpdate + (0@1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:26:07' prior: 50634626!
moveSouth
	
	position updateContent: position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:26:10' prior: 50634631!
moveWest
	
	position updateContent: position + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:26:15' prior: 50634609!
moveEast
	
	position updateContent: position + (1@0).
	! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:26:34' prior: 50634806!
moveSouth
	
	position updateContent: position lastUpdate + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:26:38' prior: 50634811!
moveWest
	
	position updateContent: position lastUpdate + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:26:44' prior: 50634816!
moveEast
	
	position updateContent: position lastUpdate + (1@0).
	! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 22:26:47'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 22:26:48'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 22:26:48'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:26:56'!
ERROR!
!ChusmaBox methodsFor: 'updates' stamp: 'JC 6/3/2023 22:27:04'!
updateContent: aRenameMe1 
	self shouldBeImplemented.! !

----SNAPSHOT----(3 June 2023 22:27:46) CuisUniversity-5832.image priorSource: 9366758!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 22:28:05'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 22:28:05'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 22:28:05'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 22:28:05'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 22:28:05'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 22:28:05'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 22:28:05'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 22:28:06'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 22:28:06'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 22:28:06'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 22:28:06'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 22:28:06'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 22:28:06'!
ERROR!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JC 6/3/2023 22:28:06'!
ERROR!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JC 6/3/2023 22:28:06'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:28:11'!
ERROR!

!classDefinition: #ChusmaBox category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:29:31'!
Object subclass: #ChusmaBox
	instanceVariableNames: 'chusmas content property'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ChusmaBox methodsFor: 'updates' stamp: 'JC 6/3/2023 22:29:28' prior: 50634893!
updateContent: aContent 
	content := aContent.
	chusmas do: [ :chusma | chusma addValue: content forProperty: property ].! !
!ChusmaBox class methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:30:17'!
for: aChusmas withInitialContent: anInitialContent forProperty: aProperty
	^self new initializeFor: aChusmas withContent: anInitialContent forProperty: aProperty. ! !

!methodRemoval: ChusmaBox class #for:withInitialContent: stamp: 'JC 6/3/2023 22:30:29'!
for: aChusmas withInitialContent: anInitialContent
	^self new initializeFor: aChusmas withContent: anInitialContent. !
!ChusmaBox methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:30:51'!
initializeFor: aChusmas withContent: anInitialContent forProperty: aProperty
	chusmas := aChusmas.
	content := anInitialContent.
	property := aProperty.! !
!MarsRover methodsFor: 'initialization' stamp: 'JC 6/3/2023 22:31:13' prior: 50634720!
initializeAt: aPosition heading: aHeadingType

	
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition forProperty: #Position.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 22:31:21'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 22:31:22'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 22:31:22'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 22:31:22'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 22:31:22'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 22:31:22'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 22:31:22'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:31:29'!
ERROR!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:31:29'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:31:29'!
ERROR!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:31:29'!
ERROR!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:31:29'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 22:31:29'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 22:31:29'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 22:31:29'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:31:29'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 22:31:29'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 22:31:29'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JC 6/3/2023 22:31:30'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:31:34'!
ERROR!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 22:35:15'!
Object subclass: #Log
	instanceVariableNames: 'events properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'adding' stamp: 'JC 6/3/2023 22:33:54'!
addValue: aValue forProperty: aProperty 
	properties at: aProperty put: aValue.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:41:18'!
test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes
	| mr log expectedLog |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Position.
	log remember: #Direction.
	
	mr addChusma: log.
	
	expectedLog := OrderedCollection new.
	
	mr process: 'f'.
	expectedLog add: 1@2
	self assert: expectedLog equals: (log show).
	
	
	mr process: 'r'.
	expectedLog add: #East
	self assert: expectedLog equals: (log show).
	
	mr process: 'f'.
	expectedLog add: 2@2
	self assert: expectedLog equals: (log show).
	
	! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:41:30' prior: 50635181!
test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes
	| mr log expectedLog |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Position.
	log remember: #Direction.
	
	mr addChusma: log.
	
	expectedLog := OrderedCollection new.
	
	mr process: 'f'.
	expectedLog add: 1@2.
	self assert: expectedLog equals: (log show).
	
	
	mr process: 'r'.
	expectedLog add: #East.
	self assert: expectedLog equals: (log show).
	
	mr process: 'f'.
	expectedLog add: 2@2.
	self assert: expectedLog equals: (log show).
	
	! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:41:33'!
ERROR!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:41:34'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:41:34'!
ERROR!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:41:34'!
ERROR!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:41:34'!
ERROR!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:41:34'!
ERROR!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:41:44'!
ERROR!
!Log methodsFor: 'remembering' stamp: 'JC 6/3/2023 22:41:53'!
remember: aRenameMe1 
	self shouldBeImplemented.! !
!Log methodsFor: 'remembering' stamp: 'JC 6/3/2023 22:42:21' prior: 50635248!
remember: aProperty 
	properties add: aProperty! !

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:42:23'!
ERROR!
!Log methodsFor: 'showing' stamp: 'JC 6/3/2023 22:43:06' prior: 50634113 overrides: 16920235!
initialize
	events := OrderedCollection new.
	properties := Set new.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:43:08'!
ERROR!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:43:08'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:43:08'!
ERROR!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:43:09'!
ERROR!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:43:09'!
ERROR!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:43:09'!
ERROR!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:43:11'!
ERROR!
!Log methodsFor: 'adding' stamp: 'JC 6/3/2023 22:43:42' prior: 50635176!
addValue: aValue forProperty: aProperty 
	properties add: aValue.! !

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:43:43'!
FAILURE!
!Log methodsFor: 'adding' stamp: 'JC 6/3/2023 22:45:16' prior: 50635293!
addValue: aValue forProperty: aProperty 
	properties includes: aProperty .! !
!Log methodsFor: 'adding' stamp: 'JC 6/3/2023 22:45:53' prior: 50635302!
addValue: aValue forProperty: aProperty 
	(properties includes: aProperty) ifTrue: [events add: aValue].! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:45:57'!
FAILURE!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:45:57'!
FAILURE!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:45:57'!
FAILURE!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:45:58'!
FAILURE!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:45:58'!
FAILURE!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:45:58'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:47:23' prior: 50634055!
test01MarsRoverMovesForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Position.
	
	mr addChusma: log.
	
	mr process: 'f'.
	
	expectedLog := OrderedCollection with: 1@2.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:47:26'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:47:26'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:47:27'!
FAILURE!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:47:27'!
FAILURE!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:47:27'!
FAILURE!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:47:27'!
FAILURE!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:47:27'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:47:48' prior: 50634144!
test02MarsRoverMovesForwardForwardAndLogsPosition
	| mr expectedLog log |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Position.
	
	mr addChusma: log.
	
	mr process: 'ff'.
	
	expectedLog := OrderedCollection with: 1@2 with: 1@3.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:47:50'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:48:03' prior: 50634263!
test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Direction.
	
	mr addChusma: log.
	
	mr process: 'r'.
	
	expectedLog := OrderedCollection with: #East.
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:48:05'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:48:13' prior: 50634363!
test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Direction.
	
	mr addChusma: log.
	
	mr process: 'rl'.
	
	expectedLog := OrderedCollection with: #East with: #North. 
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:48:14'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 22:48:26' prior: 50634350!
test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection

	| expectedLog log mr |
	mr := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	log remember: #Position.
	log remember: #Direction.
	
	mr addChusma: log.
	
	mr process: 'fr'.
	
	expectedLog := OrderedCollection with: 1@2 with: #East. 
	
	self assert: expectedLog equals: log show.! !

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:48:28'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:48:31'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:48:31'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:48:31'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:48:31'!
PASSED!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:48:31'!
PASSED!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:48:32'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:49:33' prior: 50634319!
rotateLeft
	
	head rotateLeft.
	
	chusmas do: [ :chusma | chusma addValue: head asSymbol forProperty: #Direction ].! !
!MarsRover methodsFor: 'initialization' stamp: 'JC 6/3/2023 22:51:00' prior: 50635022!
initializeAt: aPosition heading: aHeadingType
	head := aHeadingType for: self.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition forProperty: #Position.! !

----SNAPSHOT----(3 June 2023 22:52:55) CuisUniversity-5832.image priorSource: 9703896!
!ChusmaBox methodsFor: 'updates' stamp: 'JC 6/3/2023 22:55:23' prior: 50634992!
updateContent: aContent 
	content := aContent.
	chusmas do: [ :chusma | chusma addValue: (self valueForChusma: content) forProperty: property ].! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:55:33'!
ERROR!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:55:33'!
ERROR!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:55:33'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:55:34'!
PASSED!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:55:34'!
ERROR!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:55:34'!
ERROR!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:55:36'!
ERROR!
!ChusmaBox methodsFor: 'updates' stamp: 'JC 6/3/2023 22:55:43'!
valueForChusma: aContent 
	self shouldBeImplemented.! !
!ChusmaBox methodsFor: 'updates' stamp: 'JC 6/3/2023 22:55:51' prior: 50635517!
valueForChusma: aContent 
	^aContent! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:55:53'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:55:55'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:55:55'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:55:55'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:55:55'!
PASSED!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:55:55'!
PASSED!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:55:55'!
PASSED!

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 22:56:02'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 22:56:02'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 22:56:02'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 22:56:03'!
PASSED!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JC 6/3/2023 22:56:04'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JC 6/3/2023 22:56:04'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'JC 6/3/2023 22:57:28' prior: 50635473!
initializeAt: aPosition heading: aHeadingType
	head := ChusmaBox for: chusmas withInitialContent: (aHeadingType for: self) forProperty: #Direction.
	
	chusmas := OrderedCollection new.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition forProperty: #Position.! !
!MarsRover methodsFor: 'initialization' stamp: 'JC 6/3/2023 22:57:39' prior: 50635637!
initializeAt: aPosition heading: aHeadingType
	
	chusmas := OrderedCollection new.
	
	head := ChusmaBox for: chusmas withInitialContent: (aHeadingType for: self) forProperty: #Direction.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition forProperty: #Position.! !
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:58:10' prior: 50633705!
headEast
	
	head updateContent: (MarsRoverHeadingEast for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:58:23' prior: 50633710!
headNorth
	
	head updateContent: (MarsRoverHeadingNorth for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:58:31' prior: 50633715!
headSouth
	
	head updateContent: (MarsRoverHeadingSouth for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:58:39' prior: 50633720!
headWest
	
	head updateContent: (MarsRoverHeadingWest for: self). ! !
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:58:56' prior: 50635466!
rotateLeft
	
	head lastUpdate rotateLeft.
	
! !
!MarsRover methodsFor: 'heading' stamp: 'JC 6/3/2023 22:59:07' prior: 50634549!
rotateRight
	
	head lastUpdate rotateRight.
	
! !
!MarsRover methodsFor: 'testing' stamp: 'JC 6/3/2023 22:59:36' prior: 50634602!
isAt: aPosition heading: aHeadingType

	^position lastUpdate = aPosition and: [ head lastUpdate isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 22:59:48' prior: 50633759!
moveBackward
	
	head lastUpdate moveBackward! !
!MarsRover methodsFor: 'moving' stamp: 'JC 6/3/2023 23:00:02' prior: 50633767!
moveForward
	
	head lastUpdate moveForward! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 23:00:40'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 23:00:40'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 23:00:40'!
FAILURE!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 23:00:40'!
FAILURE!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 23:00:40'!
FAILURE!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 23:00:41'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 23:00:41'!
PASSED!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JC 6/3/2023 23:00:42'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JC 6/3/2023 23:00:42'!
FAILURE!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 23:00:44'!
FAILURE!

ChusmaBox subclass: #ChusmaBoxSymbol
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ChusmaBoxSymbol category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 23:01:52'!
ChusmaBox subclass: #ChusmaBoxSymbol
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ChusmaBoxSymbol methodsFor: 'no messages' stamp: 'JC 6/3/2023 23:02:07' overrides: 50635522!
valueForChusma: aContent 
	^aContent asSymbol! !
!MarsRover methodsFor: 'initialization' stamp: 'JC 6/3/2023 23:02:18' prior: 50635649!
initializeAt: aPosition heading: aHeadingType
	
	chusmas := OrderedCollection new.
	
	head := ChusmaBoxSymbol for: chusmas withInitialContent: (aHeadingType for: self) forProperty: #Direction.
	
	position := ChusmaBox for: chusmas withInitialContent: aPosition forProperty: #Position.! !

!testRun: #LogTest #test01MarsRoverMovesForwardAndLogsPosition stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #LogTest #test02MarsRoverMovesForwardForwardAndLogsPosition stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #LogTest #test03MarsRoverHeadsNorthAndLogRecordsChangeOfDirection stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #LogTest #test04MarsRoverHeadsEastThenNorthAndLogRecords2ChangesOfDirection stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #LogTest #test05MarsRoverProcessesFRAndLogRecordsPositionAndDirection stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #LogTest #test06MarsRoverProcessesFRFThenLoggerLogsPositionAndDirectionLogs3Changes stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'JC 6/3/2023 23:02:23'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #WindowTest #test01MarsRoverMovesForwardThenWindowLoggingPositionShowsLastPosition stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!testRun: #WindowTest #test02MarsRoverProcessesFRFThenWindowLoggingPositionAndDirectionShowsLastPositionAndDirection stamp: 'JC 6/3/2023 23:02:24'!
PASSED!

!methodRemoval: Log #add: stamp: 'JC 6/3/2023 23:04:50'!
add: aPosition 
	events add: aPosition .!

!methodRemoval: Log #addDirection: stamp: 'JC 6/3/2023 23:04:55'!
addDirection: aDirection 
	events add: aDirection!

Object subclass: #Chusma
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Chusma category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 23:06:10'!
Object subclass: #Chusma
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Chusma subclass: #Window
	instanceVariableNames: 'properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 23:06:26'!
Chusma subclass: #Window
	instanceVariableNames: 'properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Chusma subclass: #Log
	instanceVariableNames: 'events properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'JC 6/3/2023 23:06:32'!
Chusma subclass: #Log
	instanceVariableNames: 'events properties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Chusma methodsFor: 'no messages' stamp: 'JC 6/3/2023 23:06:46'!
addValue: aValue forProperty: aProperty 
	self subclassResponsibility ! !
!Chusma methodsFor: 'as yet unclassified' stamp: 'JC 6/3/2023 23:07:01'!
remember: aProperty 
	self subclassResponsibility ! !

!methodRemoval: ChusmaBox #initializeFor:withContent: stamp: 'JC 6/3/2023 23:07:44'!
initializeFor: aChusmas withContent: anInitialContent
	chusmas := aChusmas.
	content := anInitialContent.!

----SNAPSHOT----(3 June 2023 23:08:38) CuisUniversity-5832.image priorSource: 9722612!