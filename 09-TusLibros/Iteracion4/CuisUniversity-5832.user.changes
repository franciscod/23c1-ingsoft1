

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (15 June 2023 20:44:05) as /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/CuisUniversity-5832.image!


----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/WebClient.pck.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/TusLibros-Tests Ejercicio it4.st----!

----End fileIn of /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/TusLibrosREST Ejercicio it4.st----!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/15/2023 21:00:42' prior: 50663720!
addToCart: aRequest

	[ | bookIsbn cartId quantity |

	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest. ] fork.
		
	(Delay forSeconds: 3) wait.! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:00:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:00:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:01:01'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:13:30' prior: 50661884!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore = Semaphore new.
	
	totalSales := [ self totalSalesOf: anItem. ] fork.
	totalMoney := [ self totalMoneyRaisedBy: anItem. ] fork. 
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:14:38' prior: 50663999!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales = Semaphore new.
	semaphoreTotalMoney = Semaphore new.
	
	totalSales := [ self totalSalesOf: anItem. ] fork.
	totalMoney := [ self totalMoneyRaisedBy: anItem. ] fork. 
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:19:00' prior: 50664019!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	
	totalSales := [ [ :semaphore | self totalSalesOf: anItem. ] value: semaphoreTotalSales ] fork.
	totalMoney := [ [ :semaphore | self totalMoneyRaisedBy: anItem. ] value: semaphoreTotalSales ] fork. 
	
	
	semaphoreTotalSales wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	semaphoreTotalMoney wait.
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:21:39' prior: 50664042!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	
	totalSales := [ [ :semaphore | self totalSalesOf: anItem. ] value: semaphoreTotalSales. semaphoreTotalSales signal] fork.
	totalMoney := [ [ :semaphore | self totalMoneyRaisedBy: anItem. ] value: semaphoreTotalMoney. semaphoreTotalMoney signal] fork. 
	
	
	semaphoreTotalSales wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	semaphoreTotalMoney wait.
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:21:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:21:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:21:44'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:21:46'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:21:51'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:25:25' prior: 50664069!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	
	totalSales := [ :semaphore | [ self totalSalesOf: anItem. ] fork. ] value: semaphoreTotalSales. semaphoreTotalSales signal.
	totalMoney := [ :semaphore | [ self totalMoneyRaisedBy: anItem. ] fork. ] value: semaphoreTotalMoney. semaphoreTotalMoney signal. 
	
	
	semaphoreTotalSales wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	semaphoreTotalMoney wait.
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:25:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:25:28'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:25:30'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:25:35'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:31:09' prior: 50664181!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	
	totalSales :=   [ [ :semaphore | self totalSalesOf: anItem. ] value: semaphoreTotalSales ] fork. semaphoreTotalSales signal. 
	totalMoney :=  [ [ :semaphore | self totalMoneyRaisedBy: anItem. ] value: semaphoreTotalMoney ] fork. semaphoreTotalMoney signal. 
	
	
	semaphoreTotalSales wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	semaphoreTotalMoney wait.
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:31:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:31:13'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:31:15'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:31:17'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:34:47' prior: 50664293!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ [ :sema | totalSales := self totalSalesOf: anItem. ] value: semaphore. ] fork. semaphore signal. 
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:34:53'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:34:55'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:34:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:35:05'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:36:27' prior: 50661925!
storePerformance

	| totalMoney totalSales performance semaphore |
	
	performance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ [ :sema | totalSales := self totalSales ] value: semaphore. ] fork. semaphore signal. 
	
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:32'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:33'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:37'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:38'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:36:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:52'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:53'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:36:58'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:37:33' prior: 50664406!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ [ :sema | totalSales := self totalSalesOf: anItem. ] value: semaphore. semaphore signal.  ] fork. 
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:37:44' prior: 50664515!
storePerformance

	| totalMoney totalSales performance semaphore |
	
	performance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ [ :sema | totalSales := self totalSales ] value: semaphore. semaphore signal. ] fork. 
	
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 21:37:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:37:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 21:37:49'!
PASSED!

----SNAPSHOT----(15 June 2023 21:37:55) CuisUniversity-5832.image priorSource: 9366758!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/15/2023 21:40:36' prior: 50663903!
addToCart: aRequest

	| bookIsbn cartId quantity |

	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest. 
		
	(Delay forSeconds: 3) wait.! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/15/2023 21:43:20' prior: 50664914!
addToCart: aRequest

	| bookIsbn cartId quantity |
	
	(Delay forSeconds: 3) wait.

	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest. 
		
	! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:55:17' prior: 50664789!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ [ :sema | totalSales := self totalSalesOf: anItem. ] value: semaphore. semaphore signal.  ] fork. 
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:55:59' prior: 50664946!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ [ :sema | totalSales := self totalSalesOf: anItem. ] value: semaphore. semaphore signal.  ] fork. 
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:58:44'!
forkProcess: aBlockValue
	
	| semaphore |
	semaphore := Semaphore new.
	
	[ [ :sema | aBlockValue ] value: semaphore. semaphore signal. ] fork. 

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:59:18' prior: 50664968!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	self forkProcess: [ totalSales := self totalSalesOf: anItem. ].
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 21:59:57'!
forkProcess: aBlockValue andSignal: aSemaphore
	
	
	[ [ :sema | aBlockValue ] value: aSemaphore. aSemaphore signal. ] fork. 

	

! !

!methodRemoval: TusLibrosSystemFacade #forkProcess: stamp: 'JV 6/15/2023 22:00:00'!
forkProcess: aBlockValue
	
	| semaphore |
	semaphore := Semaphore new.
	
	[ [ :sema | aBlockValue ] value: semaphore. semaphore signal. ] fork. 

	

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 22:00:30' prior: 50664998!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	self forkProcess: [ totalSales := self totalSalesOf: anItem. ] andSignal: semaphore.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/15/2023 22:01:21' prior: 50664811!
storePerformance

	| totalMoney totalSales performance semaphore |
	
	performance := Dictionary new.
	
	semaphore := Semaphore new.
	
	self forkProcess: [ totalSales := self totalSales ] andSignal: semaphore. 
	
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/15/2023 22:01:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 22:01:24'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 22:01:25'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/15/2023 22:01:32'!
FAILURE!

----STARTUP---- (21 June 2023 17:54:36) as /home/julia/Documents/Inge/Smalltalk/TusLibros4/linux64/CuisUniversity-5832.image!


----SNAPSHOT----(21 June 2023 17:54:53) CuisUniversity-5832.image priorSource: 10664312!

----STARTUP---- (21 June 2023 18:03:39) as E:\julia\Documents\UBA\Inge1\SmallTalk\TusLibros4\CuisUniversity-5832.image!

!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:09:25'!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute ] value: aSemaphore. aSemaphore signal.  ] fork. 
	
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/21/2023 18:09:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:09:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:09:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:09:35'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:10:56' prior: 50664789!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	self executeInParallel: [totalSales := self totalSalesOf: anItem.] thenSignal: semaphore.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/21/2023 18:10:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/21/2023 18:10:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/21/2023 18:10:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/21/2023 18:10:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/21/2023 18:10:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:10:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:11:00'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:11:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:11:03'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:11:43' prior: 50665011!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	self executeInParallel: (totalSales := self totalSalesOf: anItem) thenSignal: semaphore.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/21/2023 18:11:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:11:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:11:49'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:11:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:11:52'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:13:10' prior: 50664924!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^self.
	
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/21/2023 18:13:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/21/2023 18:13:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/21/2023 18:13:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/21/2023 18:13:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:13:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:13:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:13:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:13:16'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:13:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:13:19'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:13:58' prior: 50665116!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	self executeInParallel: [totalSales := self totalSalesOf: anItem] thenSignal: semaphore.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	semaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	
	bookPerformance at: 'total' put: totalMoney.
	
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:14:13' prior: 50665221!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^self.
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:14:15' prior: 50665335!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	
	
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/21/2023 18:14:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:14:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:14:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:14:21'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'JV 6/21/2023 18:15:18' prior: 50664811!
storePerformance

	| totalMoney totalSales performance semaphore |
	
	performance := Dictionary new.
	
	semaphore := Semaphore new.
	
	self executeInParallel: [totalSales := self totalSales ] thenSignal: semaphore. 
	
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'JV 6/21/2023 18:15:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'JV 6/21/2023 18:15:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:15:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'JV 6/21/2023 18:15:23'!
PASSED!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosServerRestInterface installForDefaultSystem!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:40:34'!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:41:29' prior: 50665543!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	| result |
	[ [ :sema | result := aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^result.
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:43:19'!
executeInParallel: aBlockToExecute storeResultIn: aResult thenSignal: aSemaphore 
	
	[ [ :sema | aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:43:56' prior: 50665561!
executeInParallel: aBlockToExecute storeResultIn: aResult thenSignal: aSemaphore 
	
	| result |
	[ [ :sema | result := aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^result.
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:46:08' prior: 50663615!
createCart

	| newCartId semaphore |
	
	semaphore = Semaphore new.
	
	newCartId := self 
		executeInParallel: [restInterface createCartFor: 'hernan' password: 'smalltalk'.] 
		thenSignal: semaphore.
	
	semaphore wait.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:46:39' prior: 50665580!
createCart

	| newCartId semaphore |
	
	semaphore := Semaphore new.
	
	newCartId := self 
		executeInParallel: [restInterface createCartFor: 'hernan' password: 'smalltalk'.] 
		thenSignal: semaphore.
	
	semaphore wait.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 18:51:13' prior: 50665593!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !

!methodRemoval: TusLibrosClientTestWindowModel #executeInParallel:storeResultIn:thenSignal: stamp: 'JV 6/21/2023 18:51:37'!
executeInParallel: aBlockToExecute storeResultIn: aResult thenSignal: aSemaphore 
	
	| result |
	[ [ :sema | result := aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^result.
	!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

self inform: 'Hola'!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:15:36' prior: 50663475!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

WebServer reset!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:17:26' prior: 50663490!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:17:36' prior: 50663504!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:18:47' prior: 50665649!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := [WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.] fork.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:19:14' prior: 50665681!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	[resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.] fork.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:20:19' prior: 50665699!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	[ resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict. ] fork.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:21:27' prior: 50665714!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	self halt.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

resp isSuccess!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:22:16' prior: 50665732!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:23:34' prior: 50665751!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	[ resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict. ] fork.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:25:06' prior: 50665766!
createCartFor: aUser password: aPassword

	| fieldDict resp semaphore |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	semaphore := Semaphore new.
	
	self 
		executeInParallel: 
		[ resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict. ]  
		thenSignal: semaphore. 
	
	semaphore wait.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'initialization' stamp: 'JV 6/21/2023 19:26:18'!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	| result |
	[ [ :sema | result := aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^result.! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface class methodsFor: 'installation' stamp: 'JV 6/21/2023 19:28:00' prior: 50663869!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | [interface createCart: request] fork ].
	server 
		addService: '/addToCart' 
		action: [:request | interface addToCart: request ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface class methodsFor: 'installation' stamp: 'JV 6/21/2023 19:28:31' prior: 50665815!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | interface createCart: request ].
	server 
		addService: '/addToCart' 
		action: [:request | interface addToCart: request ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 19:29:55' prior: 50665606!
createCart

	| newCartId sema |
	sema := Semaphore new.
	[ newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'. ] thenSignal: sema.
	sema wait.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 19:30:08' prior: 50665879!
createCart

	| newCartId sema |
	sema := Semaphore new.
	self executeInParallel: [ newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'. ] thenSignal: sema.
	sema wait.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 19:30:51' prior: 50665890!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientRestInterface methodsFor: 'initialization' stamp: 'JV 6/21/2023 19:31:46' prior: 50665802!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. ! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:34:57' prior: 50665781!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict. 
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 19:37:57' prior: 50665905!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'her' password: 'smalltalk'.
	
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:38:52' prior: 50665926!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict. 
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

!methodRemoval: TusLibrosClientTestWindowModel #executeInParallel:thenSignal: stamp: 'JV 6/21/2023 19:46:04'!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	| result |
	[ [ :sema | result := aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. 
	^result.
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:47:51' prior: 50665953!
createCartFor: aUser password: aPassword

	| fieldDict resp sema |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	sema := Semaphore new.
	
	self executeInParallel: [resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict. ] thenSignal: sema.
	
	sema wait.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'JV 6/21/2023 19:49:46' prior: 50665664!
listCart: cartId

	| fieldDict resp sema |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	sema := Semaphore new.
	
	self 
	executeInParallel: 
		[resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.] 
	thenSignal: 
		sema.
	 
	sema wait.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self inform: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'JV 6/21/2023 19:50:33' prior: 50665941!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 19:53:04'!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ [ :sema | aBlockToExecute value ] value: aSemaphore. aSemaphore signal.  ] fork. ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 19:54:31' prior: 50663765!
createCart: aRequest

	[ | clientId password |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ] fork.! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 19:55:14' prior: 50663780!
listCart: aRequest

	[
		| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	] fork.
! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 19:55:54' prior: 50666060!
listCart: aRequest

	[ | cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	] fork.
! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 19:56:57' prior: 50663791!
listPurchases: aRequest

	[| clientId password purchases response |
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | soldItems total |
			purchases := systemFacade listPurchasesOf: clientId authenticatingWith: password.
			soldItems := purchases first.
			total := purchases second.
			response := String streamContents: [:stream | 
				soldItems keysAndValuesDo: [ :isbn :amount |
					stream nextPutAll: isbn; nextPut: $|; print: amount; nextPut: $| ].
				stream print: total ].
			response ]
		to: aRequest ]
	fork.! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 19:58:46' prior: 50666088!
listPurchases: aRequest

	| clientId password purchases response |
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | soldItems total |
			purchases := systemFacade listPurchasesOf: clientId authenticatingWith: password.
			soldItems := purchases first.
			total := purchases second.
			response := String streamContents: [:stream | 
				soldItems keysAndValuesDo: [ :isbn :amount |
					stream nextPutAll: isbn; nextPut: $|; print: amount; nextPut: $| ].
				stream print: total ].
			response ]
		to: aRequest! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 20:00:17' prior: 50666076!
listCart: aRequest

	| cartId sema |

	(Delay forSeconds: 10) wait.
	
	sema := Semaphore new.
	
	self executeInParallel:  
	[ self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ]. ] thenSignal: sema.
	
	sema wait.
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	
! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 20:01:30' prior: 50666041!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 20:01:45' prior: 50663903!
addToCart: aRequest

	| bookIsbn cartId quantity |

	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest.
		
	(Delay forSeconds: 3) wait.! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'JV 6/21/2023 20:02:11' prior: 50666173!
addToCart: aRequest

	| bookIsbn cartId quantity |
	
	(Delay forSeconds: 3) wait.

	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest.
		
	! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

----SNAPSHOT----(21 June 2023 20:04:28) CuisUniversity-5832.image priorSource: 10664529!

----STARTUP---- (22 June 2023 16:23:18) as /home/fd/mat/ing1/cuis/5832/linux64/CuisUniversity-5832.image!


self inform: 'Hola'!

TusLibrosServerRestInterface installForDefaultSystem!

WebServer reset!

TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'fd 6/22/2023 16:26:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'fd 6/22/2023 16:26:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'fd 6/22/2023 16:26:38'!
PASSED!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'fd 6/22/2023 16:29:01' prior: 50666033!
executeInParallel: aBlockToExecute thenSignal: aSemaphore
	
	[ aBlockToExecute value. aSemaphore signal.  ] fork. ! !

a := 4!

aSemaphore := Semaphore new.!


a := 0.
aSemaphore := Semaphore new.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
aSemaphore wait.
aSemaphore wait.
aSemaphore wait.
a.!


a := 0.
aSemaphore := Semaphore new.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
aSemaphore wait.
aSemaphore wait.
aSemaphore wait.
a.!


a := 0.
aSemaphore := Semaphore new.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
TusLibrosServerRestInterface new executeInParallel: [ a := a+1. (Delay forSeconds: 1) wait] thenSignal: aSemaphore.
aSemaphore wait.
aSemaphore wait.
aSemaphore wait.
a.!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'fd 6/22/2023 16:32:14' prior: 50666139!
listCart: aRequest

	| cartId sema |
	self halt.

	(Delay forSeconds: 10) wait.
	
	sema := Semaphore new.
	
	self executeInParallel:  
	[ self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ]. ] thenSignal: sema.
	
	sema wait.
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	
! !

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'fd 6/22/2023 16:35:01' prior: 50666420!
listCart: aRequest

	| cartId sema |
	
	sema := Semaphore new.

	self executeInParallel: [
	(Delay forSeconds: 10) wait.	
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	
	]  thenSignal: sema! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'fd 6/22/2023 16:35:03' prior: 50666436!
listCart: aRequest

	| cartId sema |
	
	sema := Semaphore new.

	self executeInParallel: [
	(Delay forSeconds: 10) wait.	
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	
	]  thenSignal: sema.! !

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'fd 6/22/2023 16:37:15' prior: 50666450!
listCart: aRequest

	| cartId sema |
	
	self halt.
	
	sema := Semaphore new.

	self executeInParallel: [
	(Delay forSeconds: 10) wait.	
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
	
	]  thenSignal: sema.! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'fd 6/22/2023 16:39:23' prior: 50666465!
listCart: aRequest

	| cartId |
	
	(Delay forSeconds: 10) wait.	
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'fd 6/22/2023 16:41:26' prior: 50663624!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		"currentSelectedCartContent := restInterface listCart: cartId."
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'fd 6/22/2023 16:42:09' prior: 50666492!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[
			currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId.
		] fork.
	].! !

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'fd 6/22/2023 16:44:46' prior: 50666021!
createCart

	| newCartId |
	[
		newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived
	] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'fd 6/22/2023 16:45:07' prior: 50663602!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[
			restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
		] fork
	]! !

TusLibrosClientTestWindow open!

----SNAPSHOT----(22 June 2023 16:47:12) CuisUniversity-5832.image priorSource: 10705824!